/*!
 * MediaElement.js
 * http://www.mediaelementjs.com/
 *
 * Wrapper that mimics native HTML5 MediaElement (audio and video)
 * using a variety of technologies (pure JavaScript, Flash, iframe)
 *
 * Copyright 2010-2017, John Dyer (http://j.hn/)
 * License: MIT
 *
 */
!(function e(t, n, o) { function i(a, s) { if (!n[a]) { if (!t[a]) { const l = typeof require === "function" && require; if (!s && l) return l(a, !0); if (r) return r(a, !0); const d = new Error(`Cannot find module '${a}'`); throw d.code = "MODULE_NOT_FOUND", d; } const u = n[a] = { exports: {} }; t[a][0].call(u.exports, (e) => { const n = t[a][1][e]; return i(n || e); }, u, u.exports, e, t, n, o); } return n[a].exports; } for (var r = typeof require === "function" && require, a = 0; a < o.length; a++)i(o[a]); return i; }({
  1: [function (e, t, n) {}, {}],
  2: [function (e, t, n) { (function (n) { let o; const i = void 0 !== n ? n : typeof window !== "undefined" ? window : {}; const r = e(1); typeof document !== "undefined" ? o = document : (o = i["__GLOBAL_DOCUMENT_CACHE@4"]) || (o = i["__GLOBAL_DOCUMENT_CACHE@4"] = r), t.exports = o; }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}); }, { 1: 1 }],
  3: [function (e, t, n) { (function (e) { let n; n = typeof window !== "undefined" ? window : void 0 !== e ? e : typeof self !== "undefined" ? self : {}, t.exports = n; }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}); }, {}],
  4: [function (e, t, n) { !(function (e) { function n() {} function o(e, t) { return function () { e.apply(t, arguments); }; } function i(e) { if (typeof this !== "object") throw new TypeError("Promises must be constructed via new"); if (typeof e !== "function") throw new TypeError("not a function"); this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], u(e, this); } function r(e, t) { for (;e._state === 3;)e = e._value; e._state !== 0 ? (e._handled = !0, i._immediateFn(() => { const n = e._state === 1 ? t.onFulfilled : t.onRejected; if (n !== null) { let o; try { o = n(e._value); } catch (e) { return void s(t.promise, e); }a(t.promise, o); } else (e._state === 1 ? a : s)(t.promise, e._value); })) : e._deferreds.push(t); } function a(e, t) { try { if (t === e) throw new TypeError("A promise cannot be resolved with itself."); if (t && (typeof t === "object" || typeof t === "function")) { const n = t.then; if (t instanceof i) return e._state = 3, e._value = t, void l(e); if (typeof n === "function") return void u(o(n, t), e); }e._state = 1, e._value = t, l(e); } catch (t) { s(e, t); } } function s(e, t) { e._state = 2, e._value = t, l(e); } function l(e) { e._state === 2 && e._deferreds.length === 0 && i._immediateFn(() => { e._handled || i._unhandledRejectionFn(e._value); }); for (let t = 0, n = e._deferreds.length; t < n; t++)r(e, e._deferreds[t]); e._deferreds = null; } function d(e, t, n) { this.onFulfilled = typeof e === "function" ? e : null, this.onRejected = typeof t === "function" ? t : null, this.promise = n; } function u(e, t) { let n = !1; try { e((e) => { n || (n = !0, a(t, e)); }, (e) => { n || (n = !0, s(t, e)); }); } catch (e) { if (n) return; n = !0, s(t, e); } } const c = setTimeout; i.prototype.catch = function (e) { return this.then(null, e); }, i.prototype.then = function (e, t) { const o = new this.constructor(n); return r(this, new d(e, t, o)), o; }, i.all = function (e) { const t = Array.prototype.slice.call(e); return new i(((e, n) => { function o(r, a) { try { if (a && (typeof a === "object" || typeof a === "function")) { const s = a.then; if (typeof s === "function") return void s.call(a, (e) => { o(r, e); }, n); }t[r] = a, --i == 0 && e(t); } catch (e) { n(e); } } if (t.length === 0) return e([]); for (var i = t.length, r = 0; r < t.length; r++)o(r, t[r]); })); }, i.resolve = function (e) { return e && typeof e === "object" && e.constructor === i ? e : new i(((t) => { t(e); })); }, i.reject = function (e) { return new i(((t, n) => { n(e); })); }, i.race = function (e) { return new i(((t, n) => { for (let o = 0, i = e.length; o < i; o++)e[o].then(t, n); })); }, i._immediateFn = typeof setImmediate === "function" && function (e) { setImmediate(e); } || function (e) { c(e, 0); }, i._unhandledRejectionFn = function (e) { typeof console !== "undefined" && console && console.warn("Possible Unhandled Promise Rejection:", e); }, i._setImmediateFn = function (e) { i._immediateFn = e; }, i._setUnhandledRejectionFn = function (e) { i._unhandledRejectionFn = e; }, void 0 !== t && t.exports ? t.exports = i : e.Promise || (e.Promise = i); }(this)); }, {}],
  5: [function (e, t, n) {
    Object.defineProperty(n, "__esModule", { value: !0 }); const o = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (e) { return typeof e; } : function (e) { return e && typeof Symbol === "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; }; const i = (function (e) { return e && e.__esModule ? e : { default: e }; }(e(7))); const r = e(15); const a = e(27); const s = { lang: "en", en: r.EN }; s.language = function () { for (var e = arguments.length, t = Array(e), n = 0; n < e; n++)t[n] = arguments[n]; if (t !== null && void 0 !== t && t.length) { if (typeof t[0] !== "string") throw new TypeError("Language code must be a string value"); if (!/^[a-z]{2}(\-[a-z]{2})?$/i.test(t[0])) throw new TypeError("Language code must have format `xx` or `xx-xx`"); s.lang = t[0], void 0 === s[t[0]] ? (t[1] = t[1] !== null && void 0 !== t[1] && o(t[1]) === "object" ? t[1] : {}, s[t[0]] = (0, a.isObjectEmpty)(t[1]) ? r.EN : t[1]) : t[1] !== null && void 0 !== t[1] && o(t[1]) === "object" && (s[t[0]] = t[1]); } return s.lang; }, s.t = function (e) { const t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null; if (typeof e === "string" && e.length) { let n = void 0; let i = void 0; const r = s.language(); const l = function (e, t, n) { return (void 0 === e ? "undefined" : o(e)) !== "object" || typeof t !== "number" || typeof n !== "number" ? e : [function () { return arguments.length <= 1 ? void 0 : arguments[1]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 1 ? arguments.length <= 1 ? void 0 : arguments[1] : arguments.length <= 2 ? void 0 : arguments[2]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 0 || (arguments.length <= 0 ? void 0 : arguments[0]) === 1 ? arguments.length <= 1 ? void 0 : arguments[1] : arguments.length <= 2 ? void 0 : arguments[2]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) % 10 == 1 && (arguments.length <= 0 ? void 0 : arguments[0]) % 100 != 11 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) !== 0 ? arguments.length <= 2 ? void 0 : arguments[2] : arguments.length <= 3 ? void 0 : arguments[3]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 1 || (arguments.length <= 0 ? void 0 : arguments[0]) === 11 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) === 2 || (arguments.length <= 0 ? void 0 : arguments[0]) === 12 ? arguments.length <= 2 ? void 0 : arguments[2] : (arguments.length <= 0 ? void 0 : arguments[0]) > 2 && (arguments.length <= 0 ? void 0 : arguments[0]) < 20 ? arguments.length <= 3 ? void 0 : arguments[3] : arguments.length <= 4 ? void 0 : arguments[4]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 1 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) === 0 || (arguments.length <= 0 ? void 0 : arguments[0]) % 100 > 0 && (arguments.length <= 0 ? void 0 : arguments[0]) % 100 < 20 ? arguments.length <= 2 ? void 0 : arguments[2] : arguments.length <= 3 ? void 0 : arguments[3]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) % 10 == 1 && (arguments.length <= 0 ? void 0 : arguments[0]) % 100 != 11 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) % 10 >= 2 && ((arguments.length <= 0 ? void 0 : arguments[0]) % 100 < 10 || (arguments.length <= 0 ? void 0 : arguments[0]) % 100 >= 20) ? arguments.length <= 2 ? void 0 : arguments[2] : [3]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) % 10 == 1 && (arguments.length <= 0 ? void 0 : arguments[0]) % 100 != 11 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) % 10 >= 2 && (arguments.length <= 0 ? void 0 : arguments[0]) % 10 <= 4 && ((arguments.length <= 0 ? void 0 : arguments[0]) % 100 < 10 || (arguments.length <= 0 ? void 0 : arguments[0]) % 100 >= 20) ? arguments.length <= 2 ? void 0 : arguments[2] : arguments.length <= 3 ? void 0 : arguments[3]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 1 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) >= 2 && (arguments.length <= 0 ? void 0 : arguments[0]) <= 4 ? arguments.length <= 2 ? void 0 : arguments[2] : arguments.length <= 3 ? void 0 : arguments[3]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 1 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) % 10 >= 2 && (arguments.length <= 0 ? void 0 : arguments[0]) % 10 <= 4 && ((arguments.length <= 0 ? void 0 : arguments[0]) % 100 < 10 || (arguments.length <= 0 ? void 0 : arguments[0]) % 100 >= 20) ? arguments.length <= 2 ? void 0 : arguments[2] : arguments.length <= 3 ? void 0 : arguments[3]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) % 100 == 1 ? arguments.length <= 2 ? void 0 : arguments[2] : (arguments.length <= 0 ? void 0 : arguments[0]) % 100 == 2 ? arguments.length <= 3 ? void 0 : arguments[3] : (arguments.length <= 0 ? void 0 : arguments[0]) % 100 == 3 || (arguments.length <= 0 ? void 0 : arguments[0]) % 100 == 4 ? arguments.length <= 4 ? void 0 : arguments[4] : arguments.length <= 1 ? void 0 : arguments[1]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 1 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) === 2 ? arguments.length <= 2 ? void 0 : arguments[2] : (arguments.length <= 0 ? void 0 : arguments[0]) > 2 && (arguments.length <= 0 ? void 0 : arguments[0]) < 7 ? arguments.length <= 3 ? void 0 : arguments[3] : (arguments.length <= 0 ? void 0 : arguments[0]) > 6 && (arguments.length <= 0 ? void 0 : arguments[0]) < 11 ? arguments.length <= 4 ? void 0 : arguments[4] : arguments.length <= 5 ? void 0 : arguments[5]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 0 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) === 1 ? arguments.length <= 2 ? void 0 : arguments[2] : (arguments.length <= 0 ? void 0 : arguments[0]) === 2 ? arguments.length <= 3 ? void 0 : arguments[3] : (arguments.length <= 0 ? void 0 : arguments[0]) % 100 >= 3 && (arguments.length <= 0 ? void 0 : arguments[0]) % 100 <= 10 ? arguments.length <= 4 ? void 0 : arguments[4] : (arguments.length <= 0 ? void 0 : arguments[0]) % 100 >= 11 ? arguments.length <= 5 ? void 0 : arguments[5] : arguments.length <= 6 ? void 0 : arguments[6]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 1 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) === 0 || (arguments.length <= 0 ? void 0 : arguments[0]) % 100 > 1 && (arguments.length <= 0 ? void 0 : arguments[0]) % 100 < 11 ? arguments.length <= 2 ? void 0 : arguments[2] : (arguments.length <= 0 ? void 0 : arguments[0]) % 100 > 10 && (arguments.length <= 0 ? void 0 : arguments[0]) % 100 < 20 ? arguments.length <= 3 ? void 0 : arguments[3] : arguments.length <= 4 ? void 0 : arguments[4]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) % 10 == 1 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) % 10 == 2 ? arguments.length <= 2 ? void 0 : arguments[2] : arguments.length <= 3 ? void 0 : arguments[3]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) !== 11 && (arguments.length <= 0 ? void 0 : arguments[0]) % 10 == 1 ? arguments.length <= 1 ? void 0 : arguments[1] : arguments.length <= 2 ? void 0 : arguments[2]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 1 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) % 10 >= 2 && (arguments.length <= 0 ? void 0 : arguments[0]) % 10 <= 4 && ((arguments.length <= 0 ? void 0 : arguments[0]) % 100 < 10 || (arguments.length <= 0 ? void 0 : arguments[0]) % 100 >= 20) ? arguments.length <= 2 ? void 0 : arguments[2] : arguments.length <= 3 ? void 0 : arguments[3]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 1 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) === 2 ? arguments.length <= 2 ? void 0 : arguments[2] : (arguments.length <= 0 ? void 0 : arguments[0]) !== 8 && (arguments.length <= 0 ? void 0 : arguments[0]) !== 11 ? arguments.length <= 3 ? void 0 : arguments[3] : arguments.length <= 4 ? void 0 : arguments[4]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 0 ? arguments.length <= 1 ? void 0 : arguments[1] : arguments.length <= 2 ? void 0 : arguments[2]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 1 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) === 2 ? arguments.length <= 2 ? void 0 : arguments[2] : (arguments.length <= 0 ? void 0 : arguments[0]) === 3 ? arguments.length <= 3 ? void 0 : arguments[3] : arguments.length <= 4 ? void 0 : arguments[4]; }, function () { return (arguments.length <= 0 ? void 0 : arguments[0]) === 0 ? arguments.length <= 1 ? void 0 : arguments[1] : (arguments.length <= 0 ? void 0 : arguments[0]) === 1 ? arguments.length <= 2 ? void 0 : arguments[2] : arguments.length <= 3 ? void 0 : arguments[3]; }][n].apply(null, [t].concat(e)); }; return void 0 !== s[r] && (n = s[r][e], t !== null && typeof t === "number" && (i = s[r]["mejs.plural-form"], n = l.apply(null, [n, t, i]))), !n && s.en && (n = s.en[e], t !== null && typeof t === "number" && (i = s.en["mejs.plural-form"], n = l.apply(null, [n, t, i]))), n = n || e, t !== null && typeof t === "number" && (n = n.replace("%1", t)), (0, a.escapeHTML)(n); } return e; }, i.default.i18n = s, typeof mejsL10n !== "undefined" && i.default.i18n.language(mejsL10n.language, mejsL10n.strings), n.default = s;
  }, { 15: 15, 27: 27, 7: 7 }],
  6: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } function i(e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function"); }Object.defineProperty(n, "__esModule", { value: !0 }); const r = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (e) { return typeof e; } : function (e) { return e && typeof Symbol === "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; }; const a = o(e(3)); const s = o(e(2)); const l = o(e(7)); const d = e(27); const u = e(28); const c = e(8); const f = e(25); const p = function e(t, n, o) {
      const p = this; i(this, e); const m = this; o = Array.isArray(o) ? o : null, m.defaults = {
        renderers: [], fakeNodeName: "mediaelementwrapper", pluginPath: "build/", shimScriptAccess: "sameDomain"
      }, n = Object.assign(m.defaults, n), m.mediaElement = s.default.createElement(n.fakeNodeName); let h = t; let v = !1; if (typeof t === "string" ? m.mediaElement.originalNode = s.default.getElementById(t) : (m.mediaElement.originalNode = t, h = t.id), void 0 === m.mediaElement.originalNode || m.mediaElement.originalNode === null) return null; m.mediaElement.options = n, h = h || `mejs_${Math.random().toString().slice(2)}`, m.mediaElement.originalNode.setAttribute("id", `${h}_from_mejs`); const y = m.mediaElement.originalNode.tagName.toLowerCase(); ["video", "audio"].indexOf(y) > -1 && !m.mediaElement.originalNode.getAttribute("preload") && m.mediaElement.originalNode.setAttribute("preload", "none"), m.mediaElement.originalNode.parentNode.insertBefore(m.mediaElement, m.mediaElement.originalNode), m.mediaElement.appendChild(m.mediaElement.originalNode); const g = function (e, t) { if (a.default.location.protocol === "https:" && e.indexOf("http:") === 0 && f.IS_IOS && l.default.html5media.mediaTypes.indexOf(t) > -1) { const n = new XMLHttpRequest(); n.onreadystatechange = function () { if (this.readyState === 4 && this.status === 200) { const t = (a.default.URL || a.default.webkitURL).createObjectURL(this.response); return m.mediaElement.originalNode.setAttribute("src", t), t; } return e; }, n.open("GET", e), n.responseType = "blob", n.send(); } return e; }; let b = void 0; if (o !== null)b = o; else if (m.mediaElement.originalNode !== null) switch (b = [], m.mediaElement.originalNode.nodeName.toLowerCase()) { case "iframe": b.push({ type: "", src: m.mediaElement.originalNode.getAttribute("src") }); break; case "audio": case "video": var E = m.mediaElement.originalNode.children.length; var S = m.mediaElement.originalNode.getAttribute("src"); if (S) { const x = m.mediaElement.originalNode; const w = (0, u.formatType)(S, x.getAttribute("type")); b.push({ type: w, src: g(S, w) }); } for (let P = 0; P < E; P++) { const T = m.mediaElement.originalNode.children[P]; if (T.tagName.toLowerCase() === "source") { const C = T.getAttribute("src"); const k = (0, u.formatType)(C, T.getAttribute("type")); b.push({ type: k, src: g(C, k) }); } } }m.mediaElement.id = h, m.mediaElement.renderers = {}, m.mediaElement.events = {}, m.mediaElement.promises = [], m.mediaElement.renderer = null, m.mediaElement.rendererName = null, m.mediaElement.changeRenderer = function (e, t) { const n = p; const o = Object.keys(t[0]).length > 2 ? t[0] : t[0].src; if (void 0 !== n.mediaElement.renderer && n.mediaElement.renderer !== null && n.mediaElement.renderer.name === e) return n.mediaElement.renderer.pause(), n.mediaElement.renderer.stop && n.mediaElement.renderer.stop(), n.mediaElement.renderer.show(), n.mediaElement.renderer.setSrc(o), !0; void 0 !== n.mediaElement.renderer && n.mediaElement.renderer !== null && (n.mediaElement.renderer.pause(), n.mediaElement.renderer.stop && n.mediaElement.renderer.stop(), n.mediaElement.renderer.hide()); let i = n.mediaElement.renderers[e]; let r = null; if (void 0 !== i && i !== null) return i.show(), i.setSrc(o), n.mediaElement.renderer = i, n.mediaElement.rendererName = e, !0; for (let a = n.mediaElement.options.renderers.length ? n.mediaElement.options.renderers : c.renderer.order, s = 0, l = a.length; s < l; s++) { const d = a[s]; if (d === e) { r = c.renderer.renderers[d]; const u = Object.assign(r.options, n.mediaElement.options); return i = r.create(n.mediaElement, u, t), i.name = e, n.mediaElement.renderers[r.name] = i, n.mediaElement.renderer = i, n.mediaElement.rendererName = e, i.show(), !0; } } return !1; }, m.mediaElement.setSize = function (e, t) { void 0 !== m.mediaElement.renderer && m.mediaElement.renderer !== null && m.mediaElement.renderer.setSize(e, t); }, m.mediaElement.generateError = function (e, t) { e = e || "", t = Array.isArray(t) ? t : []; const n = (0, d.createEvent)("error", m.mediaElement); n.message = e, n.urls = t, m.mediaElement.dispatchEvent(n), v = !0; }; const _ = l.default.html5media.properties; const N = l.default.html5media.methods; const A = function (e, t, n, o) { let i = e[t]; Object.defineProperty(e, t, { get() { return n.apply(e, [i]); }, set(t) { return i = o.apply(e, [t]); } }); }; const L = function () { return void 0 !== m.mediaElement.renderer && m.mediaElement.renderer !== null ? m.mediaElement.renderer.getSrc() : null; }; const F = function (e) { const t = []; if (typeof e === "string")t.push({ src: e, type: e ? (0, u.getTypeFromFile)(e) : "" }); else if ((void 0 === e ? "undefined" : r(e)) === "object" && void 0 !== e.src) { const n = (0, u.absolutizeUrl)(e.src); const o = e.type; const i = Object.assign(e, { src: n, type: o !== "" && o !== null && void 0 !== o || !n ? o : (0, u.getTypeFromFile)(n) }); t.push(i); } else if (Array.isArray(e)) for (let a = 0, s = e.length; a < s; a++) { const l = (0, u.absolutizeUrl)(e[a].src); const f = e[a].type; const p = Object.assign(e[a], { src: l, type: f !== "" && f !== null && void 0 !== f || !l ? f : (0, u.getTypeFromFile)(l) }); t.push(p); } const h = c.renderer.select(t, m.mediaElement.options.renderers.length ? m.mediaElement.options.renderers : []); let v = void 0; if (m.mediaElement.paused || (m.mediaElement.pause(), v = (0, d.createEvent)("pause", m.mediaElement), m.mediaElement.dispatchEvent(v)), m.mediaElement.originalNode.src = t[0].src || "", h !== null || !t[0].src) return t[0].src ? m.mediaElement.changeRenderer(h.rendererName, t) : null; m.mediaElement.generateError("No renderer found", t); }; const j = function (e, t) { try { if (e === "play" && m.mediaElement.rendererName === "native_dash") { const n = m.mediaElement.renderer[e](t); n && typeof n.then === "function" && n.catch(() => { m.mediaElement.paused && setTimeout(() => { const e = m.mediaElement.renderer.play(); void 0 !== e && e.catch(() => { m.mediaElement.renderer.paused || m.mediaElement.renderer.pause(); }); }, 150); }); } else m.mediaElement.renderer[e](t); } catch (e) { m.mediaElement.generateError(e, b); } }; A(m.mediaElement, "src", L, F), m.mediaElement.getSrc = L, m.mediaElement.setSrc = F; for (let I = 0, M = _.length; I < M; I++)!(function (e) { if (e !== "src") { const t = `${e.substring(0, 1).toUpperCase()}${e.substring(1)}`; const n = function () { return void 0 !== m.mediaElement.renderer && m.mediaElement.renderer !== null && typeof m.mediaElement.renderer[`get${t}`] === "function" ? m.mediaElement.renderer[`get${t}`]() : null; }; const o = function (e) { void 0 !== m.mediaElement.renderer && m.mediaElement.renderer !== null && typeof m.mediaElement.renderer[`set${t}`] === "function" && m.mediaElement.renderer[`set${t}`](e); }; A(m.mediaElement, e, n, o), m.mediaElement[`get${t}`] = n, m.mediaElement[`set${t}`] = o; } }(_[I])); for (let O = 0, D = N.length; O < D; O++)!(function (e) { m.mediaElement[e] = function () { for (var t = arguments.length, n = Array(t), o = 0; o < t; o++)n[o] = arguments[o]; return void 0 !== m.mediaElement.renderer && m.mediaElement.renderer !== null && typeof m.mediaElement.renderer[e] === "function" && (m.mediaElement.promises.length ? Promise.all(m.mediaElement.promises).then(() => { j(e, n); }).catch((e) => { m.mediaElement.generateError(e, b); }) : j(e, n)), null; }; }(N[O])); return m.mediaElement.addEventListener = function (e, t) { m.mediaElement.events[e] = m.mediaElement.events[e] || [], m.mediaElement.events[e].push(t); }, m.mediaElement.removeEventListener = function (e, t) { if (!e) return m.mediaElement.events = {}, !0; const n = m.mediaElement.events[e]; if (!n) return !0; if (!t) return m.mediaElement.events[e] = [], !0; for (let o = 0; o < n.length; o++) if (n[o] === t) return m.mediaElement.events[e].splice(o, 1), !0; return !1; }, m.mediaElement.dispatchEvent = function (e) { const t = m.mediaElement.events[e.type]; if (t) for (let n = 0; n < t.length; n++)t[n].apply(null, [e]); }, b.length && (m.mediaElement.src = b), m.mediaElement.promises.length ? Promise.all(m.mediaElement.promises).then(() => { m.mediaElement.options.success && m.mediaElement.options.success(m.mediaElement, m.mediaElement.originalNode); }).catch(() => { v && m.mediaElement.options.error && m.mediaElement.options.error(m.mediaElement, m.mediaElement.originalNode); }) : (m.mediaElement.options.success && m.mediaElement.options.success(m.mediaElement, m.mediaElement.originalNode), v && m.mediaElement.options.error && m.mediaElement.options.error(m.mediaElement, m.mediaElement.originalNode)), m.mediaElement;
    }; a.default.MediaElement = p, l.default.MediaElement = p, n.default = p;
  }, {
    2: 2, 25: 25, 27: 27, 28: 28, 3: 3, 7: 7, 8: 8
  }],
  7: [function (e, t, n) {
    Object.defineProperty(n, "__esModule", { value: !0 }); const o = (function (e) { return e && e.__esModule ? e : { default: e }; }(e(3))); const i = {}; i.version = "4.2.6", i.html5media = {
      properties: ["volume", "src", "currentTime", "muted", "duration", "paused", "ended", "buffered", "error", "networkState", "readyState", "seeking", "seekable", "currentSrc", "preload", "bufferedBytes", "bufferedTime", "initialTime", "startOffsetTime", "defaultPlaybackRate", "playbackRate", "played", "autoplay", "loop", "controls"], readOnlyProperties: ["duration", "paused", "ended", "buffered", "error", "networkState", "readyState", "seeking", "seekable"], methods: ["load", "play", "pause", "canPlayType"], events: ["loadstart", "durationchange", "loadedmetadata", "loadeddata", "progress", "canplay", "canplaythrough", "suspend", "abort", "error", "emptied", "stalled", "play", "playing", "pause", "waiting", "seeking", "seeked", "timeupdate", "ended", "ratechange", "volumechange"], mediaTypes: ["audio/mp3", "audio/ogg", "audio/oga", "audio/wav", "audio/x-wav", "audio/wave", "audio/x-pn-wav", "audio/mpeg", "audio/mp4", "video/mp4", "video/webm", "video/ogg", "video/ogv"]
    }, o.default.mejs = i, n.default = i;
  }, { 3: 3 }],
  8: [function (e, t, n) {
    function o(e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function"); }Object.defineProperty(n, "__esModule", { value: !0 }), n.renderer = void 0; const i = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (e) { return typeof e; } : function (e) { return e && typeof Symbol === "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; }; const r = (function () { function e(e, t) { for (let n = 0; n < t.length; n++) { const o = t[n]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o); } } return function (t, n, o) { return n && e(t.prototype, n), o && e(t, o), t; }; }()); const a = (function (e) { return e && e.__esModule ? e : { default: e }; }(e(7))); const s = (function () { function e() { o(this, e), this.renderers = {}, this.order = []; } return r(e, [{ key: "add", value(e) { if (void 0 === e.name) throw new TypeError("renderer must contain at least `name` property"); this.renderers[e.name] = e, this.order.push(e.name); } }, { key: "select", value(e) { let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : []; const n = t.length; if (t = t.length ? t : this.order, !n) { const o = [/^(html5|native)/i, /^flash/i, /iframe$/i]; const i = function (e) { for (let t = 0, n = o.length; t < n; t++) if (o[t].test(e)) return t; return o.length; }; t.sort((e, t) => i(e) - i(t)); } for (let r = 0, a = t.length; r < a; r++) { const s = t[r]; const l = this.renderers[s]; if (l !== null && void 0 !== l) for (let d = 0, u = e.length; d < u; d++) if (typeof l.canPlayType === "function" && typeof e[d].type === "string" && l.canPlayType(e[d].type)) return { rendererName: l.name, src: e[d].src }; } return null; } }, { key: "order", set(e) { if (!Array.isArray(e)) throw new TypeError("order must be an array of strings."); this._order = e; }, get() { return this._order; } }, { key: "renderers", set(e) { if (e !== null && (void 0 === e ? "undefined" : i(e)) !== "object") throw new TypeError("renderers must be an array of objects."); this._renderers = e; }, get() { return this._renderers; } }]), e; }()); const l = n.renderer = new s(); a.default.Renderers = l;
  }, { 7: 7 }],
  9: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = o(e(3)); const r = o(e(2)); const a = o(e(5)); const s = e(16); const l = o(s); const d = (function (e) { if (e && e.__esModule) return e; const t = {}; if (e != null) for (const n in e)Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]); return t.default = e, t; }(e(25))); const u = e(27); const c = e(26); const f = e(28); Object.assign(s.config, { usePluginFullScreen: !0, fullscreenText: null, useFakeFullscreen: !1 }), Object.assign(l.default.prototype, {
      isFullScreen: !1, isNativeFullScreen: !1, isInIframe: !1, isPluginClickThroughCreated: !1, fullscreenMode: "", containerSizeTimeout: null, buildfullscreen(e) { if (e.isVideo) { e.isInIframe = i.default.location !== i.default.parent.location, e.detectFullscreenMode(); const t = this; const n = (0, u.isString)(t.options.fullscreenText) ? t.options.fullscreenText : a.default.t("mejs.fullscreen"); const o = r.default.createElement("div"); if (o.className = `${t.options.classPrefix}button ${t.options.classPrefix}fullscreen-button`, o.innerHTML = `<button type="button" aria-controls="${t.id}" title="${n}" aria-label="${n}" tabindex="0"></button>`, t.addControlElement(o, "fullscreen"), o.addEventListener("click", () => { d.HAS_TRUE_NATIVE_FULLSCREEN && d.IS_FULLSCREEN || e.isFullScreen ? e.exitFullScreen() : e.enterFullScreen(); }), e.fullscreenBtn = o, t.options.keyActions.push({ keys: [70], action(e, t, n, o) { o.ctrlKey || void 0 !== e.enterFullScreen && (e.isFullScreen ? e.exitFullScreen() : e.enterFullScreen()); } }), t.exitFullscreenCallback = function (n) { (n.which || n.keyCode || 0) === 27 && (d.HAS_TRUE_NATIVE_FULLSCREEN && d.IS_FULLSCREEN || t.isFullScreen) && e.exitFullScreen(); }, t.globalBind("keydown", t.exitFullscreenCallback), t.normalHeight = 0, t.normalWidth = 0, d.HAS_TRUE_NATIVE_FULLSCREEN) { e.globalBind(d.FULLSCREEN_EVENT_NAME, () => { e.isFullScreen && (d.isFullScreen() ? (e.isNativeFullScreen = !0, e.setControlsSize()) : (e.isNativeFullScreen = !1, e.exitFullScreen())); }); } } }, cleanfullscreen(e) { e.exitFullScreen(), e.globalUnbind("keydown", e.exitFullscreenCallback); }, detectFullscreenMode() { const e = this; const t = e.media.rendererName !== null && /(native|html5)/i.test(e.media.rendererName); let n = ""; return d.HAS_TRUE_NATIVE_FULLSCREEN && t ? n = "native-native" : d.HAS_TRUE_NATIVE_FULLSCREEN && !t ? n = "plugin-native" : e.usePluginFullScreen && d.SUPPORT_POINTER_EVENTS && (n = "plugin-click"), e.fullscreenMode = n, n; }, enterFullScreen() { const e = this; const t = e.media.rendererName !== null && /(html5|native)/i.test(e.media.rendererName); const n = getComputedStyle(e.container); if (!1 === e.options.useFakeFullscreen && d.IS_IOS && d.HAS_IOS_FULLSCREEN && typeof e.media.originalNode.webkitEnterFullscreen === "function" && e.media.originalNode.canPlayType((0, f.getTypeFromFile)(e.media.getSrc())))e.media.originalNode.webkitEnterFullscreen(); else { if ((0, c.addClass)(r.default.documentElement, `${e.options.classPrefix}fullscreen`), (0, c.addClass)(e.container, `${e.options.classPrefix}container-fullscreen`), e.normalHeight = parseFloat(n.height), e.normalWidth = parseFloat(n.width), e.fullscreenMode !== "native-native" && e.fullscreenMode !== "plugin-native" || (d.requestFullScreen(e.container), e.isInIframe && setTimeout(function t() { if (e.isNativeFullScreen) { const n = i.default.innerWidth || r.default.documentElement.clientWidth || r.default.body.clientWidth; const o = screen.width; Math.abs(o - n) > 0.002 * o ? e.exitFullScreen() : setTimeout(t, 500); } }, 1e3)), e.container.style.width = "100%", e.container.style.height = "100%", e.containerSizeTimeout = setTimeout(() => { e.container.style.width = "100%", e.container.style.height = "100%", e.setControlsSize(); }, 500), t)e.node.style.width = "100%", e.node.style.height = "100%"; else for (let o = e.container.querySelectorAll("embed, object, video"), a = o.length, s = 0; s < a; s++)o[s].style.width = "100%", o[s].style.height = "100%"; e.options.setDimensions && typeof e.media.setSize === "function" && e.media.setSize(screen.width, screen.height); for (let l = e.layers.children, p = l.length, m = 0; m < p; m++)l[m].style.width = "100%", l[m].style.height = "100%"; e.fullscreenBtn && ((0, c.removeClass)(e.fullscreenBtn, `${e.options.classPrefix}fullscreen`), (0, c.addClass)(e.fullscreenBtn, `${e.options.classPrefix}unfullscreen`)), e.setControlsSize(), e.isFullScreen = !0; const h = Math.min(screen.width / e.width, screen.height / e.height); const v = e.container.querySelector(`.${e.options.classPrefix}captions-text`); v && (v.style.fontSize = `${100 * h}%`, v.style.lineHeight = "normal", e.container.querySelector(`.${e.options.classPrefix}captions-position`).style.bottom = "45px"); const y = (0, u.createEvent)("enteredfullscreen", e.container); e.container.dispatchEvent(y); } }, exitFullScreen() { const e = this; const t = e.media.rendererName !== null && /(native|html5)/i.test(e.media.rendererName); if (clearTimeout(e.containerSizeTimeout), d.HAS_TRUE_NATIVE_FULLSCREEN && (d.IS_FULLSCREEN || e.isFullScreen) && d.cancelFullScreen(), (0, c.removeClass)(r.default.documentElement, `${e.options.classPrefix}fullscreen`), (0, c.removeClass)(e.container, `${e.options.classPrefix}container-fullscreen`), e.options.setDimensions) { if (e.container.style.width = `${e.normalWidth}px`, e.container.style.height = `${e.normalHeight}px`, t)e.node.style.width = `${e.normalWidth}px`, e.node.style.height = `${e.normalHeight}px`; else for (let n = e.container.querySelectorAll("embed, object, video"), o = n.length, i = 0; i < o; i++)n[i].style.width = `${e.normalWidth}px`, n[i].style.height = `${e.normalHeight}px`; typeof e.media.setSize === "function" && e.media.setSize(e.normalWidth, e.normalHeight); for (let a = e.layers.children, s = a.length, l = 0; l < s; l++)a[l].style.width = `${e.normalWidth}px`, a[l].style.height = `${e.normalHeight}px`; }e.fullscreenBtn && ((0, c.removeClass)(e.fullscreenBtn, `${e.options.classPrefix}unfullscreen`), (0, c.addClass)(e.fullscreenBtn, `${e.options.classPrefix}fullscreen`)), e.setControlsSize(), e.isFullScreen = !1; const f = e.container.querySelector(`.${e.options.classPrefix}captions-text`); f && (f.style.fontSize = "", f.style.lineHeight = "", e.container.querySelector(`.${e.options.classPrefix}captions-position`).style.bottom = ""); const p = (0, u.createEvent)("exitedfullscreen", e.container); e.container.dispatchEvent(p); }
    });
  }, {
    16: 16, 2: 2, 25: 25, 26: 26, 27: 27, 28: 28, 3: 3, 5: 5
  }],
  10: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = o(e(2)); const r = e(16); const a = o(r); const s = o(e(5)); const l = e(27); const d = e(26); Object.assign(r.config, { playText: null, pauseText: null }), Object.assign(a.default.prototype, { buildplaypause(e, t, n, o) { function r(e) { e === "play" ? ((0, d.removeClass)(p, `${a.options.classPrefix}play`), (0, d.removeClass)(p, `${a.options.classPrefix}replay`), (0, d.addClass)(p, `${a.options.classPrefix}pause`), m.setAttribute("title", f), m.setAttribute("aria-label", f)) : ((0, d.removeClass)(p, `${a.options.classPrefix}pause`), (0, d.removeClass)(p, `${a.options.classPrefix}replay`), (0, d.addClass)(p, `${a.options.classPrefix}play`), m.setAttribute("title", c), m.setAttribute("aria-label", c)); } var a = this; const u = a.options; var c = (0, l.isString)(u.playText) ? u.playText : s.default.t("mejs.play"); var f = (0, l.isString)(u.pauseText) ? u.pauseText : s.default.t("mejs.pause"); var p = i.default.createElement("div"); p.className = `${a.options.classPrefix}button ${a.options.classPrefix}playpause-button ${a.options.classPrefix}play`, p.innerHTML = `<button type="button" aria-controls="${a.id}" title="${c}" aria-label="${f}" tabindex="0"></button>`, p.addEventListener("click", () => { a.paused ? a.play() : a.pause(); }); var m = p.querySelector("button"); a.addControlElement(p, "playpause"), r("pse"), o.addEventListener("loadedmetadata", () => { o.rendererName.indexOf("flash") === -1 && r("pse"); }), o.addEventListener("play", () => { r("play"); }), o.addEventListener("playing", () => { r("play"); }), o.addEventListener("pause", () => { r("pse"); }), o.addEventListener("ended", () => { e.options.loop || ((0, d.removeClass)(p, `${a.options.classPrefix}pause`), (0, d.removeClass)(p, `${a.options.classPrefix}play`), (0, d.addClass)(p, `${a.options.classPrefix}replay`), m.setAttribute("title", c), m.setAttribute("aria-label", c)); }); } });
  }, {
    16: 16, 2: 2, 26: 26, 27: 27, 5: 5
  }],
  11: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = o(e(2)); const r = e(16); const a = o(r); const s = o(e(5)); const l = e(25); const d = e(30); const u = e(26); Object.assign(r.config, { enableProgressTooltip: !0, useSmoothHover: !0, forceLive: !1 }), Object.assign(a.default.prototype, {
      buildprogress(e, t, n, o) { let a = 0; let c = !1; let f = !1; const p = this; const m = e.options.autoRewind; const h = e.options.enableProgressTooltip ? `<span class="${p.options.classPrefix}time-float"><span class="${p.options.classPrefix}time-float-current">00:00</span><span class="${p.options.classPrefix}time-float-corner"></span></span>` : ""; const v = i.default.createElement("div"); v.className = `${p.options.classPrefix}time-rail`, v.innerHTML = `<span class="${p.options.classPrefix}time-total ${p.options.classPrefix}time-slider"><span class="${p.options.classPrefix}time-buffering"></span><span class="${p.options.classPrefix}time-loaded"></span><span class="${p.options.classPrefix}time-current"></span><span class="${p.options.classPrefix}time-hovered no-hover"></span><span class="${p.options.classPrefix}time-handle"><span class="${p.options.classPrefix}time-handle-content"></span></span>${h}</span>`, p.addControlElement(v, "progress"), p.options.keyActions.push({ keys: [37, 227], action(e) { if (!isNaN(e.duration) && e.duration > 0) { e.isVideo && (e.showControls(), e.startControlsTimer()), e.container.querySelector(`.${r.config.classPrefix}time-total`).focus(); const t = Math.max(e.currentTime - e.options.defaultSeekBackwardInterval(e), 0); e.setCurrentTime(t); } } }, { keys: [39, 228], action(e) { if (!isNaN(e.duration) && e.duration > 0) { e.isVideo && (e.showControls(), e.startControlsTimer()), e.container.querySelector(`.${r.config.classPrefix}time-total`).focus(); const t = Math.min(e.currentTime + e.options.defaultSeekForwardInterval(e), e.duration); e.setCurrentTime(t); } } }), p.rail = t.querySelector(`.${p.options.classPrefix}time-rail`), p.total = t.querySelector(`.${p.options.classPrefix}time-total`), p.loaded = t.querySelector(`.${p.options.classPrefix}time-loaded`), p.current = t.querySelector(`.${p.options.classPrefix}time-current`), p.handle = t.querySelector(`.${p.options.classPrefix}time-handle`), p.timefloat = t.querySelector(`.${p.options.classPrefix}time-float`), p.timefloatcurrent = t.querySelector(`.${p.options.classPrefix}time-float-current`), p.slider = t.querySelector(`.${p.options.classPrefix}time-slider`), p.hovered = t.querySelector(`.${p.options.classPrefix}time-hovered`), p.buffer = t.querySelector(`.${p.options.classPrefix}time-buffering`), p.newTime = 0, p.forcedHandlePause = !1, p.setTransformStyle = function (e, t) { e.style.transform = t, e.style.webkitTransform = t, e.style.MozTransform = t, e.style.msTransform = t, e.style.OTransform = t; }, p.buffer.style.display = "none"; const y = function (t) { const n = getComputedStyle(p.total); const o = (0, u.offset)(p.total); const i = p.total.offsetWidth; const r = void 0 !== n.webkitTransform ? "webkitTransform" : void 0 !== n.mozTransform ? "mozTransform " : void 0 !== n.oTransform ? "oTransform" : void 0 !== n.msTransform ? "msTransform" : "transform"; const a = "WebKitCSSMatrix" in window ? "WebKitCSSMatrix" : "MSCSSMatrix" in window ? "MSCSSMatrix" : "CSSMatrix" in window ? "CSSMatrix" : void 0; let s = 0; let f = 0; let m = 0; let h = void 0; if (h = t.originalEvent && t.originalEvent.changedTouches ? t.originalEvent.changedTouches[0].pageX : t.changedTouches ? t.changedTouches[0].pageX : t.pageX, p.getDuration()) { if (h < o.left ? h = o.left : h > i + o.left && (h = i + o.left), m = h - o.left, s = m / i, p.newTime = s <= 0.02 ? 0 : s * p.getDuration(), c && p.getCurrentTime() !== null && p.newTime.toFixed(4) !== p.getCurrentTime().toFixed(4) && (p.setCurrentRailHandle(p.newTime), p.updateCurrent(p.newTime)), !l.IS_IOS && !l.IS_ANDROID) { if (m < 0 && (m = 0), p.options.useSmoothHover && a !== null && void 0 !== window[a]) { const v = new window[a](getComputedStyle(p.handle)[r]).m41; const y = m / parseFloat(getComputedStyle(p.total).width) - v / parseFloat(getComputedStyle(p.total).width); p.hovered.style.left = `${v}px`, p.setTransformStyle(p.hovered, `scaleX(${y})`), p.hovered.setAttribute("pos", m), y >= 0 ? (0, u.removeClass)(p.hovered, "negative") : (0, u.addClass)(p.hovered, "negative"); } if (p.timefloat) { const g = p.timefloat.offsetWidth / 2; const b = mejs.Utils.offset(p.container); const E = getComputedStyle(p.timefloat); f = h - b.left < p.timefloat.offsetWidth ? g : h - b.left >= p.container.offsetWidth - g ? p.total.offsetWidth - g : m, (0, u.hasClass)(p.container, `${p.options.classPrefix}long-video`) && (f += parseFloat(E.marginLeft) / 2 + p.timefloat.offsetWidth / 2), p.timefloat.style.left = `${f}px`, p.timefloatcurrent.innerHTML = (0, d.secondsToTimeCode)(p.newTime, e.options.alwaysShowHours, e.options.showTimecodeFrameCount, e.options.framesPerSecond, e.options.secondsDecimalLength), p.timefloat.style.display = "block"; } } } else l.IS_IOS || l.IS_ANDROID || !p.timefloat || (f = p.timefloat.offsetWidth + i >= p.container.offsetWidth ? p.timefloat.offsetWidth / 2 : 0, p.timefloat.style.left = `${f}px`, p.timefloat.style.left = `${f}px`, p.timefloat.style.display = "block"); }; const g = function () { const t = p.getCurrentTime(); const n = s.default.t("mejs.time-slider"); const i = (0, d.secondsToTimeCode)(t, e.options.alwaysShowHours, e.options.showTimecodeFrameCount, e.options.framesPerSecond, e.options.secondsDecimalLength); const r = p.getDuration(); p.slider.setAttribute("role", "slider"), p.slider.tabIndex = 0, o.paused ? (p.slider.setAttribute("aria-label", n), p.slider.setAttribute("aria-valuemin", 0), p.slider.setAttribute("aria-valuemax", r), p.slider.setAttribute("aria-valuenow", t), p.slider.setAttribute("aria-valuetext", i)) : (p.slider.removeAttribute("aria-label"), p.slider.removeAttribute("aria-valuemin"), p.slider.removeAttribute("aria-valuemax"), p.slider.removeAttribute("aria-valuenow"), p.slider.removeAttribute("aria-valuetext")); }; const b = function () { new Date() - a >= 1e3 && p.play(); }; const E = function () { c && p.getCurrentTime() !== null && p.newTime.toFixed(4) !== p.getCurrentTime().toFixed(4) && (p.setCurrentTime(p.newTime), p.setCurrentRail(), p.updateCurrent(p.newTime)), p.forcedHandlePause && (p.slider.focus(), p.play()), p.forcedHandlePause = !1; }; p.slider.addEventListener("focus", () => { e.options.autoRewind = !1; }), p.slider.addEventListener("blur", () => { e.options.autoRewind = m; }), p.slider.addEventListener("keydown", (t) => { if (new Date() - a >= 1e3 && (f = p.paused), p.options.keyActions.length) { const n = t.which || t.keyCode || 0; const i = p.getDuration(); const r = e.options.defaultSeekForwardInterval(o); const s = e.options.defaultSeekBackwardInterval(o); let d = p.getCurrentTime(); const u = p.container.querySelector(`.${p.options.classPrefix}volume-slider`); if (n === 38 || n === 40) { u && (u.style.display = "block"), p.isVideo && (p.showControls(), p.startControlsTimer()); const c = n === 38 ? Math.min(p.volume + 0.1, 1) : Math.max(p.volume - 0.1, 0); const m = c <= 0; return p.setVolume(c), void p.setMuted(m); } switch (u && (u.style.display = "none"), n) { case 37: p.getDuration() !== 1 / 0 && (d -= s); break; case 39: p.getDuration() !== 1 / 0 && (d += r); break; case 36: d = 0; break; case 35: d = i; break; case 13: case 32: return void (l.IS_FIREFOX && (p.paused ? p.play() : p.pause())); default: return; }d = d < 0 ? 0 : d >= i ? i : Math.floor(d), a = new Date(), f || e.pause(), d < p.getDuration() && !f && setTimeout(b, 1100), p.setCurrentTime(d), e.showControls(), t.preventDefault(), t.stopPropagation(); } }); const S = ["mousedown", "touchstart"]; p.slider.addEventListener("dragstart", () => !1); for (let x = 0, w = S.length; x < w; x++)p.slider.addEventListener(S[x], (e) => { if (p.forcedHandlePause = !1, p.getDuration() !== 1 / 0 && (e.which === 1 || e.which === 0)) { p.paused || (p.pause(), p.forcedHandlePause = !0), c = !0, y(e); for (let t = ["mouseup", "touchend"], n = 0, o = t.length; n < o; n++)p.container.addEventListener(t[n], (e) => { const t = e.target; (t === p.slider || t.closest(`.${p.options.classPrefix}time-slider`)) && y(e); }); p.globalBind("mouseup.dur touchend.dur", () => { E(), c = !1, p.timefloat && (p.timefloat.style.display = "none"); }); } }, !(!l.SUPPORT_PASSIVE_EVENT || S[x] !== "touchstart") && { passive: !0 }); p.slider.addEventListener("mouseenter", (e) => { e.target === p.slider && p.getDuration() !== 1 / 0 && (p.container.addEventListener("mousemove", (e) => { const t = e.target; (t === p.slider || t.closest(`.${p.options.classPrefix}time-slider`)) && y(e); }), !p.timefloat || l.IS_IOS || l.IS_ANDROID || (p.timefloat.style.display = "block"), p.hovered && !l.IS_IOS && !l.IS_ANDROID && p.options.useSmoothHover && (0, u.removeClass)(p.hovered, "no-hover")); }), p.slider.addEventListener("mouseleave", () => { p.getDuration() !== 1 / 0 && (c || (p.timefloat && (p.timefloat.style.display = "none"), p.hovered && p.options.useSmoothHover && (0, u.addClass)(p.hovered, "no-hover"))); }), p.broadcastCallback = function (n) { const o = t.querySelector(`.${p.options.classPrefix}broadcast`); if (p.options.forceLive || p.getDuration() === 1 / 0) { if (!o || p.options.forceLive) { const r = i.default.createElement("span"); r.className = `${p.options.classPrefix}broadcast`, r.innerText = s.default.t("mejs.live-broadcast"), p.slider.style.display = "none", p.rail.appendChild(r); } } else o && (p.slider.style.display = "", o.remove()), e.setProgressRail(n), p.forcedHandlePause || e.setCurrentRail(n), g(); }, o.addEventListener("progress", p.broadcastCallback), o.addEventListener("timeupdate", p.broadcastCallback), o.addEventListener("play", () => { p.buffer.style.display = "none"; }), o.addEventListener("playing", () => { p.buffer.style.display = "none"; }), o.addEventListener("seeking", () => { p.buffer.style.display = ""; }), o.addEventListener("seeked", () => { p.buffer.style.display = "none"; }), o.addEventListener("pause", () => { p.buffer.style.display = "none"; }), o.addEventListener("waiting", () => { p.buffer.style.display = ""; }), o.addEventListener("loadeddata", () => { p.buffer.style.display = ""; }), o.addEventListener("canplay", () => { p.buffer.style.display = "none"; }), o.addEventListener("error", () => { p.buffer.style.display = "none"; }), p.container.addEventListener("controlsresize", (t) => { p.getDuration() !== 1 / 0 && (e.setProgressRail(t), p.forcedHandlePause || e.setCurrentRail(t)); }); }, cleanprogress(e, t, n, o) { o.removeEventListener("progress", e.broadcastCallback), o.removeEventListener("timeupdate", e.broadcastCallback), e.rail && e.rail.remove(); }, setProgressRail(e) { const t = this; const n = void 0 !== e ? e.detail.target || e.target : t.media; let o = null; n && n.buffered && n.buffered.length > 0 && n.buffered.end && t.getDuration() ? o = n.buffered.end(n.buffered.length - 1) / t.getDuration() : n && void 0 !== n.bytesTotal && n.bytesTotal > 0 && void 0 !== n.bufferedBytes ? o = n.bufferedBytes / n.bytesTotal : e && e.lengthComputable && e.total !== 0 && (o = e.loaded / e.total), o !== null && (o = Math.min(1, Math.max(0, o)), t.loaded && t.setTransformStyle(t.loaded, `scaleX(${o})`)); }, setCurrentRailHandle(e) { const t = this; t.setCurrentRailMain(t, e); }, setCurrentRail() { const e = this; e.setCurrentRailMain(e); }, setCurrentRailMain(e, t) { if (void 0 !== e.getCurrentTime() && e.getDuration()) { const n = void 0 === t ? e.getCurrentTime() : t; if (e.total && e.handle) { const o = parseFloat(getComputedStyle(e.total).width); const i = Math.round(o * n / e.getDuration()); let r = i - Math.round(e.handle.offsetWidth / 2); if (r = r < 0 ? 0 : r, e.setTransformStyle(e.current, `scaleX(${i / o})`), e.setTransformStyle(e.handle, `translateX(${r}px)`), e.options.useSmoothHover && !(0, u.hasClass)(e.hovered, "no-hover")) { let a = parseInt(e.hovered.getAttribute("pos")); const s = (a = isNaN(a) ? 0 : a) / o - r / o; e.hovered.style.left = `${r}px`, e.setTransformStyle(e.hovered, `scaleX(${s})`), s >= 0 ? (0, u.removeClass)(e.hovered, "negative") : (0, u.addClass)(e.hovered, "negative"); } } } }
    });
  }, {
    16: 16, 2: 2, 25: 25, 26: 26, 30: 30, 5: 5
  }],
  12: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = o(e(2)); const r = e(16); const a = o(r); const s = e(30); const l = e(26); Object.assign(r.config, { duration: 0, timeAndDurationSeparator: "<span> | </span>" }), Object.assign(a.default.prototype, {
      buildcurrent(e, t, n, o) { const r = this; const a = i.default.createElement("div"); a.className = `${r.options.classPrefix}time`, a.setAttribute("role", "timer"), a.setAttribute("aria-live", "off"), a.innerHTML = `<span class="${r.options.classPrefix}currenttime">${(0, s.secondsToTimeCode)(0, e.options.alwaysShowHours, e.options.showTimecodeFrameCount, e.options.framesPerSecond, e.options.secondsDecimalLength)}</span>`, r.addControlElement(a, "current"), e.updateCurrent(), r.updateTimeCallback = function () { r.controlsAreVisible && e.updateCurrent(); }, o.addEventListener("timeupdate", r.updateTimeCallback); }, cleancurrent(e, t, n, o) { o.removeEventListener("timeupdate", e.updateTimeCallback); }, buildduration(e, t, n, o) { const r = this; if (t.lastChild.querySelector(`.${r.options.classPrefix}currenttime`))t.querySelector(`.${r.options.classPrefix}time`).innerHTML += `${r.options.timeAndDurationSeparator}<span class="${r.options.classPrefix}duration">${(0, s.secondsToTimeCode)(r.options.duration, r.options.alwaysShowHours, r.options.showTimecodeFrameCount, r.options.framesPerSecond, r.options.secondsDecimalLength)}</span>`; else { t.querySelector(`.${r.options.classPrefix}currenttime`) && (0, l.addClass)(t.querySelector(`.${r.options.classPrefix}currenttime`).parentNode, `${r.options.classPrefix}currenttime-container`); const a = i.default.createElement("div"); a.className = `${r.options.classPrefix}time ${r.options.classPrefix}duration-container`, a.innerHTML = `<span class="${r.options.classPrefix}duration">${(0, s.secondsToTimeCode)(r.options.duration, r.options.alwaysShowHours, r.options.showTimecodeFrameCount, r.options.framesPerSecond, r.options.secondsDecimalLength)}</span>`, r.addControlElement(a, "duration"); }r.updateDurationCallback = function () { r.controlsAreVisible && e.updateDuration(); }, o.addEventListener("timeupdate", r.updateDurationCallback); }, cleanduration(e, t, n, o) { o.removeEventListener("timeupdate", e.updateDurationCallback); }, updateCurrent() { const e = this; let t = e.getCurrentTime(); isNaN(t) && (t = 0); const n = (0, s.secondsToTimeCode)(t, e.options.alwaysShowHours, e.options.showTimecodeFrameCount, e.options.framesPerSecond, e.options.secondsDecimalLength); n.length > 5 ? (0, l.addClass)(e.container, `${e.options.classPrefix}long-video`) : (0, l.removeClass)(e.container, `${e.options.classPrefix}long-video`), e.controls.querySelector(`.${e.options.classPrefix}currenttime`) && (e.controls.querySelector(`.${e.options.classPrefix}currenttime`).innerText = n); }, updateDuration() { const e = this; let t = e.getDuration(); (isNaN(t) || t === 1 / 0 || t < 0) && (e.media.duration = e.options.duration = t = 0), e.options.duration > 0 && (t = e.options.duration); const n = (0, s.secondsToTimeCode)(t, e.options.alwaysShowHours, e.options.showTimecodeFrameCount, e.options.framesPerSecond, e.options.secondsDecimalLength); n.length > 5 ? (0, l.addClass)(e.container, `${e.options.classPrefix}long-video`) : (0, l.removeClass)(e.container, `${e.options.classPrefix}long-video`), e.controls.querySelector(`.${e.options.classPrefix}duration`) && t > 0 && (e.controls.querySelector(`.${e.options.classPrefix}duration`).innerHTML = n); }
    });
  }, {
    16: 16, 2: 2, 26: 26, 30: 30
  }],
  13: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = o(e(2)); const r = o(e(7)); const a = o(e(5)); const s = e(16); const l = o(s); const d = e(30); const u = e(27); const c = e(26); Object.assign(s.config, {
      startLanguage: "", tracksText: null, chaptersText: null, tracksAriaLive: !1, hideCaptionsButtonWhenEmpty: !0, toggleCaptionsButtonWhenOnlyOne: !1, slidesSelector: ""
    }), Object.assign(l.default.prototype, {
      hasChapters: !1,
      buildtracks(e, t, n, o) { if (this.findTracks(), e.tracks.length || e.trackFiles && !e.trackFiles.length !== 0) { const r = this; const s = r.options.tracksAriaLive ? ' role="log" aria-live="assertive" aria-atomic="false"' : ""; const l = (0, u.isString)(r.options.tracksText) ? r.options.tracksText : a.default.t("mejs.captions-subtitles"); const d = (0, u.isString)(r.options.chaptersText) ? r.options.chaptersText : a.default.t("mejs.captions-chapters"); const f = e.trackFiles === null ? e.tracks.length : e.trackFiles.length; if (r.domNode.textTracks) for (let p = r.domNode.textTracks.length - 1; p >= 0; p--)r.domNode.textTracks[p].mode = "hidden"; r.cleartracks(e), e.captions = i.default.createElement("div"), e.captions.className = `${r.options.classPrefix}captions-layer ${r.options.classPrefix}layer`, e.captions.innerHTML = `<div class="${r.options.classPrefix}captions-position ${r.options.classPrefix}captions-position-hover"${s}><span class="${r.options.classPrefix}captions-text"></span></div>`, e.captions.style.display = "none", n.insertBefore(e.captions, n.firstChild), e.captionsText = e.captions.querySelector(`.${r.options.classPrefix}captions-text`), e.captionsButton = i.default.createElement("div"), e.captionsButton.className = `${r.options.classPrefix}button ${r.options.classPrefix}captions-button`, e.captionsButton.innerHTML = `<button type="button" aria-controls="${r.id}" title="${l}" aria-label="${l}" tabindex="0"></button><div class="${r.options.classPrefix}captions-selector ${r.options.classPrefix}offscreen"><ul class="${r.options.classPrefix}captions-selector-list"><li class="${r.options.classPrefix}captions-selector-list-item"><input type="radio" class="${r.options.classPrefix}captions-selector-input" name="${e.id}_captions" id="${e.id}_captions_none" value="none" checked disabled><label class="${r.options.classPrefix}captions-selector-label ${r.options.classPrefix}captions-selected" for="${e.id}_captions_none">${a.default.t("mejs.none")}</label></li></ul></div>`, r.addControlElement(e.captionsButton, "tracks"), e.captionsButton.querySelector(`.${r.options.classPrefix}captions-selector-input`).disabled = !1, e.chaptersButton = i.default.createElement("div"), e.chaptersButton.className = `${r.options.classPrefix}button ${r.options.classPrefix}chapters-button`, e.chaptersButton.innerHTML = `<button type="button" aria-controls="${r.id}" title="${d}" aria-label="${d}" tabindex="0"></button><div class="${r.options.classPrefix}chapters-selector ${r.options.classPrefix}offscreen"><ul class="${r.options.classPrefix}chapters-selector-list"></ul></div>`; for (var m = 0, h = 0; h < f; h++) { const v = e.tracks[h].kind; e.tracks[h].src.trim() && (v === "subtitles" || v === "captions" ? m++ : v !== "chapters" || t.querySelector(`.${r.options.classPrefix}chapter-selector`) || e.captionsButton.parentNode.insertBefore(e.chaptersButton, e.captionsButton)); }e.trackToLoad = -1, e.selectedTrack = null, e.isLoadingTrack = !1; for (let y = 0; y < f; y++) { const g = e.tracks[y].kind; !e.tracks[y].src.trim() || g !== "subtitles" && g !== "captions" || e.addTrackButton(e.tracks[y].trackId, e.tracks[y].srclang, e.tracks[y].label); }e.loadNextTrack(); const b = ["mouseenter", "focusin"]; const E = ["mouseleave", "focusout"]; if (r.options.toggleCaptionsButtonWhenOnlyOne && m === 1)e.captionsButton.addEventListener("click", (t) => { let n = "none"; e.selectedTrack === null && (n = e.tracks[0].trackId); const o = t.keyCode || t.which; e.setTrack(n, void 0 !== o); }); else { for (var S = e.captionsButton.querySelectorAll(`.${r.options.classPrefix}captions-selector-label`), x = e.captionsButton.querySelectorAll("input[type=radio]"), w = 0, P = b.length; w < P; w++)e.captionsButton.addEventListener(b[w], function () { (0, c.removeClass)(this.querySelector(`.${r.options.classPrefix}captions-selector`), `${r.options.classPrefix}offscreen`); }); for (let T = 0, C = E.length; T < C; T++)e.captionsButton.addEventListener(E[T], function () { (0, c.addClass)(this.querySelector(`.${r.options.classPrefix}captions-selector`), `${r.options.classPrefix}offscreen`); }); for (let k = 0, _ = x.length; k < _; k++)x[k].addEventListener("click", function (t) { const n = t.keyCode || t.which; e.setTrack(this.value, void 0 !== n); }); for (let N = 0, A = S.length; N < A; N++)S[N].addEventListener("click", function (e) { const t = (0, c.siblings)(this, (e) => e.tagName === "INPUT")[0]; const n = (0, u.createEvent)("click", t); t.dispatchEvent(n), e.preventDefault(); }); e.captionsButton.addEventListener("keydown", (e) => { e.stopPropagation(); }); } for (let L = 0, F = b.length; L < F; L++)e.chaptersButton.addEventListener(b[L], function () { this.querySelector(`.${r.options.classPrefix}chapters-selector-list`).children.length && (0, c.removeClass)(this.querySelector(`.${r.options.classPrefix}chapters-selector`), `${r.options.classPrefix}offscreen`); }); for (let j = 0, I = E.length; j < I; j++)e.chaptersButton.addEventListener(E[j], function () { (0, c.addClass)(this.querySelector(`.${r.options.classPrefix}chapters-selector`), `${r.options.classPrefix}offscreen`); }); e.chaptersButton.addEventListener("keydown", (e) => { e.stopPropagation(); }), e.options.alwaysShowControls ? (0, c.addClass)(e.container.querySelector(`.${r.options.classPrefix}captions-position`), `${r.options.classPrefix}captions-position-hover`) : (e.container.addEventListener("controlsshown", () => { (0, c.addClass)(e.container.querySelector(`.${r.options.classPrefix}captions-position`), `${r.options.classPrefix}captions-position-hover`); }), e.container.addEventListener("controlshidden", () => { o.paused || (0, c.removeClass)(e.container.querySelector(`.${r.options.classPrefix}captions-position`), `${r.options.classPrefix}captions-position-hover`); })), o.addEventListener("timeupdate", () => { e.displayCaptions(); }), e.options.slidesSelector !== "" && (e.slidesContainer = i.default.querySelectorAll(e.options.slidesSelector), o.addEventListener("timeupdate", () => { e.displaySlides(); })); } },
      cleartracks(e) { e && (e.captions && e.captions.remove(), e.chapters && e.chapters.remove(), e.captionsText && e.captionsText.remove(), e.captionsButton && e.captionsButton.remove(), e.chaptersButton && e.chaptersButton.remove()); },
      rebuildtracks() { const e = this; e.findTracks(), e.buildtracks(e, e.controls, e.layers, e.media); },
      findTracks() {
        const e = this; const t = e.trackFiles === null ? e.node.querySelectorAll("track") : e.trackFiles; const n = t.length; e.tracks = []; for (let o = 0; o < n; o++) {
          const i = t[o]; const r = i.getAttribute("srclang").toLowerCase() || ""; const a = `${e.id}_track_${o}_${i.getAttribute("kind")}_${r}`; e.tracks.push({
            trackId: a, srclang: r, src: i.getAttribute("src"), kind: i.getAttribute("kind"), label: i.getAttribute("label") || "", entries: [], isLoaded: !1
          });
        }
      },
      setTrack(e, t) { for (var n = this, o = n.captionsButton.querySelectorAll('input[type="radio"]'), i = n.captionsButton.querySelectorAll(`.${n.options.classPrefix}captions-selected`), r = n.captionsButton.querySelector(`input[value="${e}"]`), a = 0, s = o.length; a < s; a++)o[a].checked = !1; for (let l = 0, d = i.length; l < d; l++)(0, c.removeClass)(i[l], `${n.options.classPrefix}captions-selected`); r.checked = !0; for (let f = (0, c.siblings)(r, (e) => (0, c.hasClass)(e, `${n.options.classPrefix}captions-selector-label`)), p = 0, m = f.length; p < m; p++)(0, c.addClass)(f[p], `${n.options.classPrefix}captions-selected`); if (e === "none")n.selectedTrack = null, (0, c.removeClass)(n.captionsButton, `${n.options.classPrefix}captions-enabled`); else for (let h = 0, v = n.tracks.length; h < v; h++) { const y = n.tracks[h]; if (y.trackId === e) { n.selectedTrack === null && (0, c.addClass)(n.captionsButton, `${n.options.classPrefix}captions-enabled`), n.selectedTrack = y, n.captions.setAttribute("lang", n.selectedTrack.srclang), n.displayCaptions(); break; } } const g = (0, u.createEvent)("captionschange", n.media); g.detail.caption = n.selectedTrack, n.media.dispatchEvent(g), t || setTimeout(() => { n.container.focus(); }, 500); },
      loadNextTrack() { const e = this; e.trackToLoad++, e.trackToLoad < e.tracks.length ? (e.isLoadingTrack = !0, e.loadTrack(e.trackToLoad)) : (e.isLoadingTrack = !1, e.checkForTracks()); },
      loadTrack(e) { const t = this; const n = t.tracks[e]; void 0 === n || void 0 === n.src && n.src === "" || (0, c.ajax)(n.src, "text", (e) => { n.entries = typeof e === "string" && /<tt\s+xml/gi.exec(e) ? r.default.TrackFormatParser.dfxp.parse(e) : r.default.TrackFormatParser.webvtt.parse(e), n.isLoaded = !0, t.enableTrackButton(n), t.loadNextTrack(), n.kind === "slides" ? t.setupSlides(n) : n.kind !== "chapters" || t.hasChapters || (t.drawChapters(n), t.hasChapters = !0); }, () => { t.removeTrackButton(n.trackId), t.loadNextTrack(); }); },
      enableTrackButton(e) { const t = this; const n = e.srclang; const o = i.default.getElementById(`${e.trackId}`); if (o) { let s = e.label; s === "" && (s = a.default.t(r.default.language.codes[n]) || n), o.disabled = !1; for (let l = (0, c.siblings)(o, (e) => (0, c.hasClass)(e, `${t.options.classPrefix}captions-selector-label`)), d = 0, f = l.length; d < f; d++)l[d].innerHTML = s; if (t.options.startLanguage === n) { o.checked = !0; const p = (0, u.createEvent)("click", o); o.dispatchEvent(p); } } },
      removeTrackButton(e) { const t = i.default.getElementById(`${e}`); if (t) { const n = t.closest("li"); n && n.remove(); } },
      addTrackButton(e, t, n) { const o = this; n === "" && (n = a.default.t(r.default.language.codes[t]) || t), o.captionsButton.querySelector("ul").innerHTML += `<li class="${o.options.classPrefix}captions-selector-list-item"><input type="radio" class="${o.options.classPrefix}captions-selector-input" name="${o.id}_captions" id="${e}" value="${e}" disabled><label class="${o.options.classPrefix}captions-selector-label"for="${e}">${n} (loading)</label></li>`; },
      checkForTracks() { const e = this; let t = !1; if (e.options.hideCaptionsButtonWhenEmpty) { for (let n = 0, o = e.tracks.length; n < o; n++) { const i = e.tracks[n].kind; if ((i === "subtitles" || i === "captions") && e.tracks[n].isLoaded) { t = !0; break; } }e.captionsButton.style.display = t ? "" : "none", e.setControlsSize(); } },
      displayCaptions() { if (void 0 !== this.tracks) { const e = this; const t = e.selectedTrack; if (t !== null && t.isLoaded) { const n = e.searchTrackPosition(t.entries, e.media.currentTime); if (n > -1) return e.captionsText.innerHTML = (function (e) { const t = i.default.createElement("div"); t.innerHTML = e; for (let n = t.getElementsByTagName("script"), o = n.length; o--;)n[o].remove(); for (let r = t.getElementsByTagName("*"), a = 0, s = r.length; a < s; a++) for (let l = r[a].attributes, d = Array.prototype.slice.call(l), u = 0, c = d.length; u < c; u++)d[u].name.startsWith("on") || d[u].value.startsWith("javascript") ? r[a].remove() : d[u].name === "style" && r[a].removeAttribute(d[u].name); return t.innerHTML; }(t.entries[n].text)), e.captionsText.className = `${e.options.classPrefix}captions-text ${t.entries[n].identifier || ""}`, e.captions.style.display = "", void (e.captions.style.height = "0px"); e.captions.style.display = "none"; } else e.captions.style.display = "none"; } },
      setupSlides(e) { const t = this; t.slides = e, t.slides.entries.imgs = [t.slides.entries.length], t.showSlide(0); },
      showSlide(e) { const t = this; const n = this; if (void 0 !== n.tracks && void 0 !== n.slidesContainer) { const o = n.slides.entries[e].text; let r = n.slides.entries[e].imgs; if (void 0 === r || void 0 === r.fadeIn) { const a = i.default.createElement("img"); a.src = o, a.addEventListener("load", () => { const e = t; var o = (0, c.siblings)(e, (e) => o(e)); e.style.display = "none", n.slidesContainer.innerHTML += e.innerHTML, (0, c.fadeIn)(n.slidesContainer.querySelector(a)); for (let i = 0, r = o.length; i < r; i++)(0, c.fadeOut)(o[i], 400); }), n.slides.entries[e].imgs = r = a; } else if (!(0, c.visible)(r)) { var s = (0, c.siblings)(self, (e) => s(e)); (0, c.fadeIn)(n.slidesContainer.querySelector(r)); for (let l = 0, d = s.length; l < d; l++)(0, c.fadeOut)(s[l]); } } },
      displaySlides() { const e = this; if (void 0 !== this.slides) { const t = e.slides; const n = e.searchTrackPosition(t.entries, e.media.currentTime); n > -1 && e.showSlide(n); } },
      drawChapters(e) { const t = this; const n = e.entries.length; if (n) { t.chaptersButton.querySelector("ul").innerHTML = ""; for (let o = 0; o < n; o++)t.chaptersButton.querySelector("ul").innerHTML += `<li class="${t.options.classPrefix}chapters-selector-list-item" role="menuitemcheckbox" aria-live="polite" aria-disabled="false" aria-checked="false"><input type="radio" class="${t.options.classPrefix}captions-selector-input" name="${t.id}_chapters" id="${t.id}_chapters_${o}" value="${e.entries[o].start}" disabled><label class="${t.options.classPrefix}chapters-selector-label"for="${t.id}_chapters_${o}">${e.entries[o].text}</label></li>`; for (var i = t.chaptersButton.querySelectorAll('input[type="radio"]'), r = t.chaptersButton.querySelectorAll(`.${t.options.classPrefix}chapters-selector-label`), a = 0, s = i.length; a < s; a++)i[a].disabled = !1, i[a].checked = !1, i[a].addEventListener("click", function (e) { const n = this; const o = t.chaptersButton.querySelectorAll("li"); const i = (0, c.siblings)(n, (e) => (0, c.hasClass)(e, `${t.options.classPrefix}chapters-selector-label`))[0]; n.checked = !0, n.parentNode.setAttribute("aria-checked", !0), (0, c.addClass)(i, `${t.options.classPrefix}chapters-selected`), (0, c.removeClass)(t.chaptersButton.querySelector(`.${t.options.classPrefix}chapters-selected`), `${t.options.classPrefix}chapters-selected`); for (let r = 0, a = o.length; r < a; r++)o[r].setAttribute("aria-checked", !1); void 0 === (e.keyCode || e.which) && setTimeout(() => { t.container.focus(); }, 500), t.media.setCurrentTime(parseFloat(n.value)), t.media.paused && t.media.play(); }); for (let l = 0, d = r.length; l < d; l++)r[l].addEventListener("click", function (e) { const t = (0, c.siblings)(this, (e) => e.tagName === "INPUT")[0]; const n = (0, u.createEvent)("click", t); t.dispatchEvent(n), e.preventDefault(); }); } },
      searchTrackPosition(e, t) { for (let n = 0, o = e.length - 1, i = void 0, r = void 0, a = void 0; n <= o;) { if (i = n + o >> 1, r = e[i].start, a = e[i].stop, t >= r && t < a) return i; r < t ? n = i + 1 : r > t && (o = i - 1); } return -1; }
    }), r.default.language = {
      codes: {
        af: "mejs.afrikaans", sq: "mejs.albanian", ar: "mejs.arabic", be: "mejs.belarusian", bg: "mejs.bulgarian", ca: "mejs.catalan", zh: "mejs.chinese", "zh-cn": "mejs.chinese-simplified", "zh-tw": "mejs.chines-traditional", hr: "mejs.croatian", cs: "mejs.czech", da: "mejs.danish", nl: "mejs.dutch", en: "mejs.english", et: "mejs.estonian", fl: "mejs.filipino", fi: "mejs.finnish", fr: "mejs.french", gl: "mejs.galician", de: "mejs.german", el: "mejs.greek", ht: "mejs.haitian-creole", iw: "mejs.hebrew", hi: "mejs.hindi", hu: "mejs.hungarian", is: "mejs.icelandic", id: "mejs.indonesian", ga: "mejs.irish", it: "mejs.italian", ja: "mejs.japanese", ko: "mejs.korean", lv: "mejs.latvian", lt: "mejs.lithuanian", mk: "mejs.macedonian", ms: "mejs.malay", mt: "mejs.maltese", no: "mejs.norwegian", fa: "mejs.persian", pl: "mejs.polish", pt: "mejs.portuguese", ro: "mejs.romanian", ru: "mejs.russian", sr: "mejs.serbian", sk: "mejs.slovak", sl: "mejs.slovenian", es: "mejs.spanish", sw: "mejs.swahili", sv: "mejs.swedish", tl: "mejs.tagalog", th: "mejs.thai", tr: "mejs.turkish", uk: "mejs.ukrainian", vi: "mejs.vietnamese", cy: "mejs.welsh", yi: "mejs.yiddish"
      }
    }, r.default.TrackFormatParser = {
      webvtt: {
        pattern: /^((?:[0-9]{1,2}:)?[0-9]{2}:[0-9]{2}([,.][0-9]{1,3})?) --\> ((?:[0-9]{1,2}:)?[0-9]{2}:[0-9]{2}([,.][0-9]{3})?)(.*)$/,
        parse(e) {
          for (var t = e.split(/\r?\n/), n = [], o = void 0, i = void 0, r = void 0, a = 0, s = t.length; a < s; a++) {
            if ((o = this.pattern.exec(t[a])) && a < t.length) {
              for (a - 1 >= 0 && t[a - 1] !== "" && (r = t[a - 1]), i = t[++a], a++; t[a] !== "" && a < t.length;)i = `${i}\n${t[a]}`, a++; i = i.trim().replace(/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi, "<a href='$1' target='_blank'>$1</a>"), n.push({
                identifier: r, start: (0, d.convertSMPTEtoSeconds)(o[1]) === 0 ? 0.2 : (0, d.convertSMPTEtoSeconds)(o[1]), stop: (0, d.convertSMPTEtoSeconds)(o[3]), text: i, settings: o[5]
              });
            }r = "";
          } return n;
        }
      },
      dfxp: {
        parse(e) {
          const t = (e = $(e).filter("tt")).firstChild; const n = t.querySelectorAll("p"); const o = e.getElementById(`${t.attr("style")}`); const i = []; let r = void 0; if (o.length) { o.removeAttribute("id"); const a = o.attributes; if (a.length) { r = {}; for (let s = 0, l = a.length; s < l; s++)r[a[s].name.split(":")[1]] = a[s].value; } } for (let u = 0, c = n.length; u < c; u++) {
            let f = void 0; const p = {
              start: null, stop: null, style: null, text: null
            }; if (n.eq(u).attr("begin") && (p.start = (0, d.convertSMPTEtoSeconds)(n.eq(u).attr("begin"))), !p.start && n.eq(u - 1).attr("end") && (p.start = (0, d.convertSMPTEtoSeconds)(n.eq(u - 1).attr("end"))), n.eq(u).attr("end") && (p.stop = (0, d.convertSMPTEtoSeconds)(n.eq(u).attr("end"))), !p.stop && n.eq(u + 1).attr("begin") && (p.stop = (0, d.convertSMPTEtoSeconds)(n.eq(u + 1).attr("begin"))), r) { f = ""; for (const m in r)f += `${m}:${r[m]};`; }f && (p.style = f), p.start === 0 && (p.start = 0.2), p.text = n.eq(u).innerHTML.trim().replace(/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi, "<a href='$1' target='_blank'>$1</a>"), i.push(p);
          } return i;
        }
      }
    };
  }, {
    16: 16, 2: 2, 26: 26, 27: 27, 30: 30, 5: 5, 7: 7
  }],
  14: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = o(e(2)); const r = e(16); const a = o(r); const s = o(e(5)); const l = e(25); const d = e(27); const u = e(26); Object.assign(r.config, {
      muteText: null, unmuteText: null, allyVolumeControlText: null, hideVolumeOnTouchDevices: !0, audioVolume: "horizontal", videoVolume: "vertical", startVolume: 0.8
    }), Object.assign(a.default.prototype, { buildvolume(e, t, n, o) { if (!l.IS_ANDROID && !l.IS_IOS || !this.options.hideVolumeOnTouchDevices) { const a = this; const c = a.isVideo ? a.options.videoVolume : a.options.audioVolume; const f = (0, d.isString)(a.options.muteText) ? a.options.muteText : s.default.t("mejs.mute"); const p = (0, d.isString)(a.options.unmuteText) ? a.options.unmuteText : s.default.t("mejs.unmute"); const m = (0, d.isString)(a.options.allyVolumeControlText) ? a.options.allyVolumeControlText : s.default.t("mejs.volume-help-text"); const h = i.default.createElement("div"); if (h.className = `${a.options.classPrefix}button ${a.options.classPrefix}volume-button ${a.options.classPrefix}mute`, h.innerHTML = c === "horizontal" ? `<button type="button" aria-controls="${a.id}" title="${f}" aria-label="${f}" tabindex="0"></button>` : `<button type="button" aria-controls="${a.id}" title="${f}" aria-label="${f}" tabindex="0"></button><a href="javascript:void(0);" class="${a.options.classPrefix}volume-slider" aria-label="${s.default.t("mejs.volume-slider")}" aria-valuemin="0" aria-valuemax="100" role="slider" aria-orientation="vertical"><span class="${a.options.classPrefix}offscreen">${m}</span><div class="${a.options.classPrefix}volume-total"><div class="${a.options.classPrefix}volume-current"></div><div class="${a.options.classPrefix}volume-handle"></div></div></a>`, a.addControlElement(h, "volume"), a.options.keyActions.push({ keys: [38], action(e) { const t = e.container.querySelector(`.${r.config.classPrefix}volume-slider`); (t || e.container.querySelector(`.${r.config.classPrefix}volume-slider`).matches(":focus")) && (t.style.display = "block"), e.isVideo && (e.showControls(), e.startControlsTimer()); const n = Math.min(e.volume + 0.1, 1); e.setVolume(n), n > 0 && e.setMuted(!1); } }, { keys: [40], action(e) { const t = e.container.querySelector(`.${r.config.classPrefix}volume-slider`); t && (t.style.display = "block"), e.isVideo && (e.showControls(), e.startControlsTimer()); const n = Math.max(e.volume - 0.1, 0); e.setVolume(n), n <= 0.1 && e.setMuted(!0); } }, { keys: [77], action(e) { e.container.querySelector(`.${r.config.classPrefix}volume-slider`).style.display = "block", e.isVideo && (e.showControls(), e.startControlsTimer()), e.media.muted ? e.setMuted(!1) : e.setMuted(!0); } }), c === "horizontal") { const v = i.default.createElement("a"); v.className = `${a.options.classPrefix}horizontal-volume-slider`, v.href = "javascript:void(0);", v.setAttribute("aria-label", s.default.t("mejs.volume-slider")), v.setAttribute("aria-valuemin", 0), v.setAttribute("aria-valuemax", 100), v.setAttribute("role", "slider"), v.innerHTML += `<span class="${a.options.classPrefix}offscreen">${m}</span><div class="${a.options.classPrefix}horizontal-volume-total"><div class="${a.options.classPrefix}horizontal-volume-current"></div><div class="${a.options.classPrefix}horizontal-volume-handle"></div></div>`, h.parentNode.insertBefore(v, h.nextSibling); } let y = !1; let g = !1; let b = !1; const E = function () { const e = Math.floor(100 * o.volume); S.setAttribute("aria-valuenow", e), S.setAttribute("aria-valuetext", `${e}%`); }; var S = c === "vertical" ? a.container.querySelector(`.${a.options.classPrefix}volume-slider`) : a.container.querySelector(`.${a.options.classPrefix}horizontal-volume-slider`); const x = c === "vertical" ? a.container.querySelector(`.${a.options.classPrefix}volume-total`) : a.container.querySelector(`.${a.options.classPrefix}horizontal-volume-total`); const w = c === "vertical" ? a.container.querySelector(`.${a.options.classPrefix}volume-current`) : a.container.querySelector(`.${a.options.classPrefix}horizontal-volume-current`); const P = c === "vertical" ? a.container.querySelector(`.${a.options.classPrefix}volume-handle`) : a.container.querySelector(`.${a.options.classPrefix}horizontal-volume-handle`); const T = function (e) { if (e !== null && !isNaN(e) && void 0 !== e) { if (e = Math.max(0, e), (e = Math.min(e, 1)) === 0) { (0, u.removeClass)(h, `${a.options.classPrefix}mute`), (0, u.addClass)(h, `${a.options.classPrefix}unmute`); const t = h.firstElementChild; t.setAttribute("title", p), t.setAttribute("aria-label", p); } else { (0, u.removeClass)(h, `${a.options.classPrefix}unmute`), (0, u.addClass)(h, `${a.options.classPrefix}mute`); const n = h.firstElementChild; n.setAttribute("title", f), n.setAttribute("aria-label", f); } const o = `${100 * e}%`; const i = getComputedStyle(P); c === "vertical" ? (w.style.bottom = 0, w.style.height = o, P.style.bottom = o, P.style.marginBottom = `${-parseFloat(i.height) / 2}px`) : (w.style.left = 0, w.style.width = o, P.style.left = o, P.style.marginLeft = `${-parseFloat(i.width) / 2}px`); } }; const C = function (e) { const t = (0, u.offset)(x); const n = getComputedStyle(x); b = !0; let o = null; if (c === "vertical") { const i = parseFloat(n.height); if (o = (i - (e.pageY - t.top)) / i, t.top === 0 || t.left === 0) return; } else { const r = parseFloat(n.width); o = (e.pageX - t.left) / r; }o = Math.max(0, o), o = Math.min(o, 1), T(o), a.setMuted(o === 0), a.setVolume(o), e.preventDefault(), e.stopPropagation(); }; const k = function () { a.muted ? (T(0), (0, u.removeClass)(h, `${a.options.classPrefix}mute`), (0, u.addClass)(h, `${a.options.classPrefix}unmute`)) : (T(o.volume), (0, u.removeClass)(h, `${a.options.classPrefix}unmute`), (0, u.addClass)(h, `${a.options.classPrefix}mute`)); }; e.container.addEventListener("keydown", (e) => { !!e.target.closest(`.${a.options.classPrefix}container`) || c !== "vertical" || (S.style.display = "none"); }), h.addEventListener("mouseenter", (e) => { e.target === h && (S.style.display = "block", g = !0, e.preventDefault(), e.stopPropagation()); }), h.addEventListener("focusin", () => { S.style.display = "block", g = !0; }), h.addEventListener("focusout", (e) => { e.relatedTarget && (!e.relatedTarget || e.relatedTarget.matches(`.${a.options.classPrefix}volume-slider`)) || c !== "vertical" || (S.style.display = "none"); }), h.addEventListener("mouseleave", () => { g = !1, y || c !== "vertical" || (S.style.display = "none"); }), h.addEventListener("focusout", () => { g = !1; }), h.addEventListener("keydown", (e) => { if (a.options.keyActions.length) { const t = e.which || e.keyCode || 0; let n = o.volume; switch (t) { case 38: n = Math.min(n + 0.1, 1); break; case 40: n = Math.max(0, n - 0.1); break; default: return !0; }y = !1, T(n), o.setVolume(n), e.preventDefault(), e.stopPropagation(); } }), h.querySelector("button").addEventListener("click", () => { o.setMuted(!o.muted); const e = (0, d.createEvent)("volumechange", o); o.dispatchEvent(e); }), S.addEventListener("dragstart", () => !1), S.addEventListener("mouseover", () => { g = !0; }), S.addEventListener("focusin", () => { S.style.display = "block", g = !0; }), S.addEventListener("focusout", () => { g = !1, y || c !== "vertical" || (S.style.display = "none"); }), S.addEventListener("mousedown", (e) => { C(e), a.globalBind("mousemove.vol", (e) => { const t = e.target; y && (t === S || t.closest(c === "vertical" ? `.${a.options.classPrefix}volume-slider` : `.${a.options.classPrefix}horizontal-volume-slider`)) && C(e); }), a.globalBind("mouseup.vol", () => { y = !1, g || c !== "vertical" || (S.style.display = "none"); }), y = !0, e.preventDefault(), e.stopPropagation(); }), o.addEventListener("volumechange", (e) => { y || k(), E(); }); let _ = !1; o.addEventListener("rendererready", () => { b || setTimeout(() => { _ = !0, (e.options.startVolume === 0 || o.originalNode.muted) && (o.setMuted(!0), e.options.startVolume = 0), o.setVolume(e.options.startVolume), a.setControlsSize(); }, 250); }), o.addEventListener("loadedmetadata", () => { setTimeout(() => { b || _ || ((e.options.startVolume === 0 || o.originalNode.muted) && (o.setMuted(!0), e.options.startVolume = 0), o.setVolume(e.options.startVolume), a.setControlsSize()), _ = !1; }, 250); }), (e.options.startVolume === 0 || o.originalNode.muted) && (o.setMuted(!0), e.options.startVolume = 0, k()), a.container.addEventListener("controlsresize", () => { k(); }); } } });
  }, {
    16: 16, 2: 2, 25: 25, 26: 26, 27: 27, 5: 5
  }],
  15: [function (e, t, n) {
    Object.defineProperty(n, "__esModule", { value: !0 }); n.EN = {
      "mejs.plural-form": 1, "mejs.download-file": "Download File", "mejs.install-flash": "You are using a browser that does not have Flash player enabled or installed. Please turn on your Flash player plugin or download the latest version from https://get.adobe.com/flashplayer/", "mejs.fullscreen": "Fullscreen", "mejs.play": "Play", "mejs.pause": "Pause", "mejs.time-slider": "Time Slider", "mejs.time-help-text": "Use Left/Right Arrow keys to advance one second, Up/Down arrows to advance ten seconds.", "mejs.live-broadcast": "Live Broadcast", "mejs.volume-help-text": "Use Up/Down Arrow keys to increase or decrease volume.", "mejs.unmute": "Unmute", "mejs.mute": "Mute", "mejs.volume-slider": "Volume Slider", "mejs.video-player": "Video Player", "mejs.audio-player": "Audio Player", "mejs.captions-subtitles": "Captions/Subtitles", "mejs.captions-chapters": "Chapters", "mejs.none": "None", "mejs.afrikaans": "Afrikaans", "mejs.albanian": "Albanian", "mejs.arabic": "Arabic", "mejs.belarusian": "Belarusian", "mejs.bulgarian": "Bulgarian", "mejs.catalan": "Catalan", "mejs.chinese": "Chinese", "mejs.chinese-simplified": "Chinese (Simplified)", "mejs.chinese-traditional": "Chinese (Traditional)", "mejs.croatian": "Croatian", "mejs.czech": "Czech", "mejs.danish": "Danish", "mejs.dutch": "Dutch", "mejs.english": "English", "mejs.estonian": "Estonian", "mejs.filipino": "Filipino", "mejs.finnish": "Finnish", "mejs.french": "French", "mejs.galician": "Galician", "mejs.german": "German", "mejs.greek": "Greek", "mejs.haitian-creole": "Haitian Creole", "mejs.hebrew": "Hebrew", "mejs.hindi": "Hindi", "mejs.hungarian": "Hungarian", "mejs.icelandic": "Icelandic", "mejs.indonesian": "Indonesian", "mejs.irish": "Irish", "mejs.italian": "Italian", "mejs.japanese": "Japanese", "mejs.korean": "Korean", "mejs.latvian": "Latvian", "mejs.lithuanian": "Lithuanian", "mejs.macedonian": "Macedonian", "mejs.malay": "Malay", "mejs.maltese": "Maltese", "mejs.norwegian": "Norwegian", "mejs.persian": "Persian", "mejs.polish": "Polish", "mejs.portuguese": "Portuguese", "mejs.romanian": "Romanian", "mejs.russian": "Russian", "mejs.serbian": "Serbian", "mejs.slovak": "Slovak", "mejs.slovenian": "Slovenian", "mejs.spanish": "Spanish", "mejs.swahili": "Swahili", "mejs.swedish": "Swedish", "mejs.tagalog": "Tagalog", "mejs.thai": "Thai", "mejs.turkish": "Turkish", "mejs.ukrainian": "Ukrainian", "mejs.vietnamese": "Vietnamese", "mejs.welsh": "Welsh", "mejs.yiddish": "Yiddish"
    };
  }, {}],
  16: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } function i(e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function"); }Object.defineProperty(n, "__esModule", { value: !0 }), n.config = void 0; const r = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (e) { return typeof e; } : function (e) { return e && typeof Symbol === "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; }; const a = (function () { function e(e, t) { for (let n = 0; n < t.length; n++) { const o = t[n]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o); } } return function (t, n, o) { return n && e(t.prototype, n), o && e(t, o), t; }; }()); const s = o(e(3)); const l = o(e(2)); const d = o(e(7)); const u = o(e(6)); const c = o(e(17)); const f = o(e(5)); const p = e(25); const m = e(27); const h = e(30); const v = e(28); const y = (function (e) { if (e && e.__esModule) return e; const t = {}; if (e != null) for (const n in e)Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]); return t.default = e, t; }(e(26))); d.default.mepIndex = 0, d.default.players = {}; const g = n.config = {
      poster: "", showPosterWhenEnded: !1, showPosterWhenPaused: !1, defaultVideoWidth: 480, defaultVideoHeight: 270, videoWidth: -1, videoHeight: -1, defaultAudioWidth: 400, defaultAudioHeight: 40, defaultSeekBackwardInterval(e) { return 0.05 * e.getDuration(); }, defaultSeekForwardInterval(e) { return 0.05 * e.getDuration(); }, setDimensions: !0, audioWidth: -1, audioHeight: -1, loop: !1, autoRewind: !0, enableAutosize: !0, timeFormat: "", alwaysShowHours: !1, showTimecodeFrameCount: !1, framesPerSecond: 25, alwaysShowControls: !1, hideVideoControlsOnLoad: !1, hideVideoControlsOnPause: !1, clickToPlayPause: !0, controlsTimeoutDefault: 1500, controlsTimeoutMouseEnter: 2500, controlsTimeoutMouseLeave: 1e3, iPadUseNativeControls: !1, iPhoneUseNativeControls: !1, AndroidUseNativeControls: !1, features: ["playpause", "current", "progress", "duration", "tracks", "volume", "fullscreen"], useDefaultControls: !1, isVideo: !0, stretching: "auto", classPrefix: "mejs__", enableKeyboard: !0, pauseOtherPlayers: !0, secondsDecimalLength: 0, customError: null, keyActions: [{ keys: [32, 179], action(e) { p.IS_FIREFOX || (e.paused || e.ended ? e.play() : e.pause()); } }]
    }; d.default.MepDefaults = g; const b = (function () {
      function e(t, n) {
        i(this, e); const o = this; const r = typeof t === "string" ? l.default.getElementById(t) : t; if (!(o instanceof e)) return new e(r, n); if (o.node = o.media = r, o.node) {
          if (o.media.player) return o.media.player; if (o.hasFocus = !1, o.controlsAreVisible = !0, o.controlsEnabled = !0, o.controlsTimer = null, o.currentMediaTime = 0, o.proxy = null, void 0 === n) { const a = o.node.getAttribute("data-mejsoptions"); n = a ? JSON.parse(a) : {}; }o.options = { ...g, ...n }, o.options.loop && !o.media.getAttribute("loop") ? (o.media.loop = !0, o.node.loop = !0) : o.media.loop && (o.options.loop = !0), o.options.timeFormat || (o.options.timeFormat = "mm:ss", o.options.alwaysShowHours && (o.options.timeFormat = "hh:mm:ss"), o.options.showTimecodeFrameCount && (o.options.timeFormat += ":ff")), (0, h.calculateTimeFormat)(0, o.options, o.options.framesPerSecond || 25), o.id = `mep_${d.default.mepIndex++}`, d.default.players[o.id] = o; const s = { ...o.options, success(e, t) { o._meReady(e, t); }, error(e) { o._handleError(e); } }; const c = o.node.tagName.toLowerCase(); if (o.isDynamic = c !== "audio" && c !== "video" && c !== "iframe", o.isVideo = o.isDynamic ? o.options.isVideo : c !== "audio" && o.options.isVideo, o.mediaFiles = null, o.trackFiles = null, p.IS_IPAD && o.options.iPadUseNativeControls || p.IS_IPHONE && o.options.iPhoneUseNativeControls)o.node.setAttribute("controls", !0), p.IS_IPAD && o.node.getAttribute("autoplay") && o.play(); else if (!o.isVideo && (o.isVideo || !o.options.features.length && !o.options.useDefaultControls) || p.IS_ANDROID && o.options.AndroidUseNativeControls)o.isVideo || o.options.features.length || o.options.useDefaultControls || (o.node.style.display = "none"); else {
            o.node.removeAttribute("controls"); const b = o.isVideo ? f.default.t("mejs.video-player") : f.default.t("mejs.audio-player"); const E = l.default.createElement("span"); if (E.className = `${o.options.classPrefix}offscreen`, E.innerText = b, o.media.parentNode.insertBefore(E, o.media), o.container = l.default.createElement("div"), o.container.id = o.id, o.container.className = `${o.options.classPrefix}container ${o.options.classPrefix}container-keyboard-inactive ${o.media.className}`, o.container.tabIndex = 0, o.container.setAttribute("role", "application"), o.container.setAttribute("aria-label", b), o.container.innerHTML = `<div class="${o.options.classPrefix}inner"><div class="${o.options.classPrefix}mediaelement"></div><div class="${o.options.classPrefix}layers"></div><div class="${o.options.classPrefix}controls"></div></div>`, o.container.addEventListener("focus", (e) => { if (!o.controlsAreVisible && !o.hasFocus && o.controlsEnabled) { o.showControls(!0); const t = (0, m.isNodeAfter)(e.relatedTarget, o.container) ? `.${o.options.classPrefix}controls .${o.options.classPrefix}button:last-child > button` : `.${o.options.classPrefix}playpause-button > button`; o.container.querySelector(t).focus(); } }), o.node.parentNode.insertBefore(o.container, o.node), o.options.features.length || o.options.useDefaultControls || (o.container.style.background = "transparent", o.container.querySelector(`.${o.options.classPrefix}controls`).style.display = "none"), o.isVideo && o.options.stretching === "fill" && !y.hasClass(o.container.parentNode, `${o.options.classPrefix}fill-container`)) { o.outerContainer = o.media.parentNode; const S = l.default.createElement("div"); S.className = `${o.options.classPrefix}fill-container`, o.container.parentNode.insertBefore(S, o.container), S.appendChild(o.container); } if (p.IS_ANDROID && y.addClass(o.container, `${o.options.classPrefix}android`), p.IS_IOS && y.addClass(o.container, `${o.options.classPrefix}ios`), p.IS_IPAD && y.addClass(o.container, `${o.options.classPrefix}ipad`), p.IS_IPHONE && y.addClass(o.container, `${o.options.classPrefix}iphone`), y.addClass(o.container, o.isVideo ? `${o.options.classPrefix}video` : `${o.options.classPrefix}audio`), p.IS_SAFARI && !p.IS_IOS) { y.addClass(o.container, `${o.options.classPrefix}hide-cues`); for (var x = o.node.cloneNode(), w = o.node.children, P = [], T = [], C = 0, k = w.length; C < k; C++) { var _ = w[C]; !(function () { switch (_.tagName.toLowerCase()) { case "source": var e = {}; Array.prototype.slice.call(_.attributes).forEach((t) => { e[t.name] = t.value; }), e.type = (0, v.formatType)(e.src, e.type), P.push(e); break; case "track": _.mode = "hidden", T.push(_); break; default: x.appendChild(_); } }()); }o.node.remove(), o.node = o.media = x, P.length && (o.mediaFiles = P), T.length && (o.trackFiles = T); }o.container.querySelector(`.${o.options.classPrefix}mediaelement`).appendChild(o.node), o.media.player = o, o.controls = o.container.querySelector(`.${o.options.classPrefix}controls`), o.layers = o.container.querySelector(`.${o.options.classPrefix}layers`); const N = o.isVideo ? "video" : "audio"; const
              A = N.substring(0, 1).toUpperCase() + N.substring(1); o.options[`${N}Width`] > 0 || o.options[`${N}Width`].toString().indexOf("%") > -1 ? o.width = o.options[`${N}Width`] : o.node.style.width !== "" && o.node.style.width !== null ? o.width = o.node.style.width : o.node.getAttribute("width") ? o.width = o.node.getAttribute("width") : o.width = o.options[`default${A}Width`], o.options[`${N}Height`] > 0 || o.options[`${N}Height`].toString().indexOf("%") > -1 ? o.height = o.options[`${N}Height`] : o.node.style.height !== "" && o.node.style.height !== null ? o.height = o.node.style.height : o.node.getAttribute("height") ? o.height = o.node.getAttribute("height") : o.height = o.options[`default${A}Height`], o.initialAspectRatio = o.height >= o.width ? o.width / o.height : o.height / o.width, o.setPlayerSize(o.width, o.height), s.pluginWidth = o.width, s.pluginHeight = o.height;
          } if (d.default.MepDefaults = s, new u.default(o.media, s, o.mediaFiles), void 0 !== o.container && o.options.features.length && o.controlsAreVisible && !o.options.hideVideoControlsOnLoad) { const L = (0, m.createEvent)("controlsshown", o.container); o.container.dispatchEvent(L); } return o;
        }
      } return a(e, [{ key: "showControls", value(e) { const t = this; if (e = void 0 === e || e, !t.controlsAreVisible && t.isVideo) { if (e)!(function () { y.fadeIn(t.controls, 200, () => { y.removeClass(t.controls, `${t.options.classPrefix}offscreen`); const e = (0, m.createEvent)("controlsshown", t.container); t.container.dispatchEvent(e); }); for (var e = t.container.querySelectorAll(`.${t.options.classPrefix}control`), n = 0, o = e.length; n < o; n++)!(function (n, o) { y.fadeIn(e[n], 200, () => { y.removeClass(e[n], `${t.options.classPrefix}offscreen`); }); }(n)); }()); else { y.removeClass(t.controls, `${t.options.classPrefix}offscreen`), t.controls.style.display = "", t.controls.style.opacity = 1; for (let n = t.container.querySelectorAll(`.${t.options.classPrefix}control`), o = 0, i = n.length; o < i; o++)y.removeClass(n[o], `${t.options.classPrefix}offscreen`), n[o].style.display = ""; const r = (0, m.createEvent)("controlsshown", t.container); t.container.dispatchEvent(r); }t.controlsAreVisible = !0, t.setControlsSize(); } } }, { key: "hideControls", value(e, t) { const n = this; if (e = void 0 === e || e, !0 === t || !(!n.controlsAreVisible || n.options.alwaysShowControls || n.paused && n.readyState === 4 && (!n.options.hideVideoControlsOnLoad && n.currentTime <= 0 || !n.options.hideVideoControlsOnPause && n.currentTime > 0) || n.isVideo && !n.options.hideVideoControlsOnLoad && !n.readyState || n.ended)) { if (e)!(function () { y.fadeOut(n.controls, 200, () => { y.addClass(n.controls, `${n.options.classPrefix}offscreen`), n.controls.style.display = ""; const e = (0, m.createEvent)("controlshidden", n.container); n.container.dispatchEvent(e); }); for (var e = n.container.querySelectorAll(`.${n.options.classPrefix}control`), t = 0, o = e.length; t < o; t++)!(function (t, o) { y.fadeOut(e[t], 200, () => { y.addClass(e[t], `${n.options.classPrefix}offscreen`), e[t].style.display = ""; }); }(t)); }()); else { y.addClass(n.controls, `${n.options.classPrefix}offscreen`), n.controls.style.display = "", n.controls.style.opacity = 0; for (let o = n.container.querySelectorAll(`.${n.options.classPrefix}control`), i = 0, r = o.length; i < r; i++)y.addClass(o[i], `${n.options.classPrefix}offscreen`), o[i].style.display = ""; const a = (0, m.createEvent)("controlshidden", n.container); n.container.dispatchEvent(a); }n.controlsAreVisible = !1; } } }, { key: "startControlsTimer", value(e) { const t = this; e = void 0 !== e ? e : t.options.controlsTimeoutDefault, t.killControlsTimer("start"), t.controlsTimer = setTimeout(() => { t.hideControls(), t.killControlsTimer("hide"); }, e); } }, { key: "killControlsTimer", value() { const e = this; e.controlsTimer !== null && (clearTimeout(e.controlsTimer), delete e.controlsTimer, e.controlsTimer = null); } }, { key: "disableControls", value() { const e = this; e.killControlsTimer(), e.controlsEnabled = !1, e.hideControls(!1, !0); } }, { key: "enableControls", value() { const e = this; e.controlsEnabled = !0, e.showControls(!1); } }, { key: "_setDefaultPlayer", value() { const e = this; e.proxy && e.proxy.pause(), e.proxy = new c.default(e), e.media.addEventListener("loadedmetadata", () => { e.getCurrentTime() > 0 && e.currentMediaTime > 0 && (e.setCurrentTime(e.currentMediaTime), p.IS_IOS || p.IS_ANDROID || e.play()); }); } }, { key: "_meReady", value(e, t) { const n = this; const o = t.getAttribute("autoplay"); const i = !(void 0 === o || o === null || o === "false"); const r = e.rendererName !== null && /(native|html5)/i.test(n.media.rendererName); if (n.controls && n.enableControls(), n.container && n.container.querySelector(`.${n.options.classPrefix}overlay-play`) && (n.container.querySelector(`.${n.options.classPrefix}overlay-play`).style.display = ""), !n.created) { if (n.created = !0, n.media = e, n.domNode = t, !(p.IS_ANDROID && n.options.AndroidUseNativeControls || p.IS_IPAD && n.options.iPadUseNativeControls || p.IS_IPHONE && n.options.iPhoneUseNativeControls)) { if (!n.isVideo && !n.options.features.length && !n.options.useDefaultControls) return i && r && n.play(), void (n.options.success && (typeof n.options.success === "string" ? s.default[n.options.success](n.media, n.domNode, n) : n.options.success(n.media, n.domNode, n))); if (n.featurePosition = {}, n._setDefaultPlayer(), n.buildposter(n, n.controls, n.layers, n.media), n.buildkeyboard(n, n.controls, n.layers, n.media), n.buildoverlays(n, n.controls, n.layers, n.media), n.options.useDefaultControls) { const a = ["playpause", "current", "progress", "duration", "tracks", "volume", "fullscreen"]; n.options.features = a.concat(n.options.features.filter((e) => a.indexOf(e) === -1)); } for (let u = 0, c = n.options.features.length; u < c; u++) { const f = n.options.features[u]; if (n[`build${f}`]) try { n[`build${f}`](n, n.controls, n.layers, n.media); } catch (e) { console.error(`error building ${f}`, e); } } const v = (0, m.createEvent)("controlsready", n.container); n.container.dispatchEvent(v), n.setPlayerSize(n.width, n.height), n.setControlsSize(), n.isVideo && (n.clickToPlayPauseCallback = function () { if (n.options.clickToPlayPause) { const e = n.container.querySelector(`.${n.options.classPrefix}overlay-button`); const t = e.getAttribute("aria-pressed"); n.paused && t ? n.pause() : n.paused ? n.play() : n.pause(), e.setAttribute("aria-pressed", !t), n.container.focus(); } }, n.createIframeLayer(), n.media.addEventListener("click", n.clickToPlayPauseCallback), !p.IS_ANDROID && !p.IS_IOS || n.options.alwaysShowControls ? (n.container.addEventListener("mouseenter", () => { n.controlsEnabled && (n.options.alwaysShowControls || (n.killControlsTimer("enter"), n.showControls(), n.startControlsTimer(n.options.controlsTimeoutMouseEnter))); }), n.container.addEventListener("mousemove", () => { n.controlsEnabled && (n.controlsAreVisible || n.showControls(), n.options.alwaysShowControls || n.startControlsTimer(n.options.controlsTimeoutMouseEnter)); }), n.container.addEventListener("mouseleave", () => { n.controlsEnabled && (n.paused || n.options.alwaysShowControls || n.startControlsTimer(n.options.controlsTimeoutMouseLeave)); })) : n.node.addEventListener("touchstart", () => { n.controlsAreVisible ? n.hideControls(!1) : n.controlsEnabled && n.showControls(!1); }, !!p.SUPPORT_PASSIVE_EVENT && { passive: !0 }), n.options.hideVideoControlsOnLoad && n.hideControls(!1), n.options.enableAutosize && n.media.addEventListener("loadedmetadata", (e) => { const t = void 0 !== e ? e.detail.target || e.target : n.media; n.options.videoHeight <= 0 && !n.domNode.getAttribute("height") && !n.domNode.style.height && t !== null && !isNaN(t.videoHeight) && (n.setPlayerSize(t.videoWidth, t.videoHeight), n.setControlsSize(), n.media.setSize(t.videoWidth, t.videoHeight)); })), n.media.addEventListener("play", () => { n.hasFocus = !0; for (const e in d.default.players) if (d.default.players.hasOwnProperty(e)) { const t = d.default.players[e]; t.id === n.id || !n.options.pauseOtherPlayers || t.paused || t.ended || (t.pause(), t.hasFocus = !1); }p.IS_ANDROID || p.IS_IOS || n.options.alwaysShowControls || !n.isVideo || n.hideControls(); }), n.media.addEventListener("ended", () => { if (n.options.autoRewind) try { n.setCurrentTime(0), setTimeout(() => { const e = n.container.querySelector(`.${n.options.classPrefix}overlay-loading`); e && e.parentNode && (e.parentNode.style.display = "none"); }, 20); } catch (e) {} typeof n.media.renderer.stop === "function" ? n.media.renderer.stop() : n.pause(), n.setProgressRail && n.setProgressRail(), n.setCurrentRail && n.setCurrentRail(), n.options.loop ? n.play() : !n.options.alwaysShowControls && n.controlsEnabled && n.showControls(); }), n.media.addEventListener("loadedmetadata", () => { (0, h.calculateTimeFormat)(n.getDuration(), n.options, n.options.framesPerSecond || 25), n.updateDuration && n.updateDuration(), n.updateCurrent && n.updateCurrent(), n.isFullScreen || (n.setPlayerSize(n.width, n.height), n.setControlsSize()); }); let g = null; n.media.addEventListener("timeupdate", () => { isNaN(n.getDuration()) || g === n.getDuration() || (g = n.getDuration(), (0, h.calculateTimeFormat)(g, n.options, n.options.framesPerSecond || 25), n.updateDuration && n.updateDuration(), n.updateCurrent && n.updateCurrent(), n.setControlsSize()); }), n.container.addEventListener("click", (e) => { y.addClass(e.currentTarget, `${n.options.classPrefix}container-keyboard-inactive`); }), n.container.addEventListener("focusin", (e) => { y.removeClass(e.currentTarget, `${n.options.classPrefix}container-keyboard-inactive`), !n.isVideo || p.IS_ANDROID || p.IS_IOS || !n.controlsEnabled || n.options.alwaysShowControls || (n.killControlsTimer("enter"), n.showControls(), n.startControlsTimer(n.options.controlsTimeoutMouseEnter)); }), n.container.addEventListener("focusout", (e) => { setTimeout(() => { e.relatedTarget && n.keyboardAction && !e.relatedTarget.closest(`.${n.options.classPrefix}container`) && (n.keyboardAction = !1, !n.isVideo || n.options.alwaysShowControls || n.paused || n.startControlsTimer(n.options.controlsTimeoutMouseLeave)); }, 0); }), setTimeout(() => { n.setPlayerSize(n.width, n.height), n.setControlsSize(); }, 0), n.globalResizeCallback = function () { n.isFullScreen || p.HAS_TRUE_NATIVE_FULLSCREEN && l.default.webkitIsFullScreen || n.setPlayerSize(n.width, n.height), n.setControlsSize(); }, n.globalBind("resize", n.globalResizeCallback); }i && r && n.play(), n.options.success && (typeof n.options.success === "string" ? s.default[n.options.success](n.media, n.domNode, n) : n.options.success(n.media, n.domNode, n)); } } }, { key: "_handleError", value(e, t, n) { const o = this; const i = o.layers.querySelector(`.${o.options.classPrefix}overlay-play`); i && (i.style.display = "none"), o.options.error && o.options.error(e, t, n), o.container.querySelector(`.${o.options.classPrefix}cannotplay`) && o.container.querySelector(`.${o.options.classPrefix}cannotplay`).remove(); const r = l.default.createElement("div"); r.className = `${o.options.classPrefix}cannotplay`, r.style.width = "100%", r.style.height = "100%"; let a = typeof o.options.customError === "function" ? o.options.customError(o.media, o.media.originalNode) : o.options.customError; let s = ""; if (!a) { const u = o.media.originalNode.getAttribute("poster"); if (u && (s = `<img src="${u}" alt="${d.default.i18n.t("mejs.download-file")}">`), e.message && (a = `<p>${e.message}</p>`), e.urls) for (let c = 0, f = e.urls.length; c < f; c++) { const p = e.urls[c]; a += `<a href="${p.src}" data-type="${p.type}"><span>${d.default.i18n.t("mejs.download-file")}: ${p.src}</span></a>`; } }a && o.layers.querySelector(`.${o.options.classPrefix}overlay-error`) && (r.innerHTML = a, o.layers.querySelector(`.${o.options.classPrefix}overlay-error`).innerHTML = `${s}${r.outerHTML}`, o.layers.querySelector(`.${o.options.classPrefix}overlay-error`).parentNode.style.display = "block"), o.controlsEnabled && o.disableControls(); } }, { key: "setPlayerSize", value(e, t) { const n = this; if (!n.options.setDimensions) return !1; switch (void 0 !== e && (n.width = e), void 0 !== t && (n.height = t), n.options.stretching) { case "fill": n.isVideo ? n.setFillMode() : n.setDimensions(n.width, n.height); break; case "responsive": n.setResponsiveMode(); break; case "none": n.setDimensions(n.width, n.height); break; default: !0 === n.hasFluidMode() ? n.setResponsiveMode() : n.setDimensions(n.width, n.height); } } }, { key: "hasFluidMode", value() { const e = this; return e.height.toString().indexOf("%") !== -1 || e.node && e.node.style.maxWidth && e.node.style.maxWidth !== "none" && e.node.style.maxWidth !== e.width || e.node && e.node.currentStyle && e.node.currentStyle.maxWidth === "100%"; } }, { key: "setResponsiveMode", value() { const e = this; const t = (function () { for (let t = void 0, n = e.container; n;) { try { if (p.IS_FIREFOX && n.tagName.toLowerCase() === "html" && s.default.self !== s.default.top && s.default.frameElement !== null) return s.default.frameElement; t = n.parentElement; } catch (e) { t = n.parentElement; } if (t && y.visible(t)) return t; n = t; } return null; }()); const n = t ? getComputedStyle(t, null) : getComputedStyle(l.default.body, null); const o = e.isVideo ? e.media.videoWidth && e.media.videoWidth > 0 ? e.media.videoWidth : e.node.getAttribute("width") ? e.node.getAttribute("width") : e.options.defaultVideoWidth : e.options.defaultAudioWidth; const i = e.isVideo ? e.media.videoHeight && e.media.videoHeight > 0 ? e.media.videoHeight : e.node.getAttribute("height") ? e.node.getAttribute("height") : e.options.defaultVideoHeight : e.options.defaultAudioHeight; const r = (function () { let t = 1; return e.isVideo ? (t = e.media.videoWidth && e.media.videoWidth > 0 && e.media.videoHeight && e.media.videoHeight > 0 ? e.height >= e.width ? e.media.videoWidth / e.media.videoHeight : e.media.videoHeight / e.media.videoWidth : e.initialAspectRatio, (isNaN(t) || t < 0.01 || t > 100) && (t = 1), t) : t; }()); const a = parseFloat(n.height); let d = void 0; let u = parseFloat(n.width); if (d = e.isVideo ? e.height === "100%" ? parseFloat(u * i / o, 10) : e.height >= e.width ? parseFloat(u / r, 10) : parseFloat(u * r, 10) : i, isNaN(d) && (d = a), e.container.parentNode.length > 0 && e.container.parentNode.tagName.toLowerCase() === "body" && (u = s.default.innerWidth || l.default.documentElement.clientWidth || l.default.body.clientWidth, d = s.default.innerHeight || l.default.documentElement.clientHeight || l.default.body.clientHeight), d && u) { e.container.style.width = `${u}px`, e.container.style.height = `${d}px`, e.node.style.width = "100%", e.node.style.height = "100%", e.isVideo && e.media.setSize && e.media.setSize(u, d); for (let c = e.layers.children, f = 0, m = c.length; f < m; f++)c[f].style.width = "100%", c[f].style.height = "100%"; } } }, { key: "setFillMode", value() { const e = this; let t = void 0; let n = !1; try { s.default.self !== s.default.top ? (n = !0, t = s.default.frameElement) : t = e.outerContainer; } catch (n) { t = e.outerContainer; } let o = getComputedStyle(t); e.node.style.height !== "none" && e.node.style.height !== e.height && (e.node.style.height = "auto"), e.node.style.maxWidth !== "none" && e.node.style.maxWidth !== e.width && (e.node.style.maxWidth = "none"), e.node.style.maxHeight !== "none" && e.node.style.maxHeight !== e.height && (e.node.style.maxHeight = "none"), e.node.currentStyle && (e.node.currentStyle.height === "100%" && (e.node.currentStyle.height = "auto"), e.node.currentStyle.maxWidth === "100%" && (e.node.currentStyle.maxWidth = "none"), e.node.currentStyle.maxHeight === "100%" && (e.node.currentStyle.maxHeight = "none")), n || parseFloat(o.width) || (t.style.width = `${e.media.offsetWidth}px`), n || parseFloat(o.height) || (t.style.height = `${e.media.offsetHeight}px`), o = getComputedStyle(t); const i = parseFloat(o.width); const r = parseFloat(o.height); e.setDimensions("100%", "100%"); const a = e.container.querySelector(`.${e.options.classPrefix}poster>img`); a && (a.style.display = ""); for (let l = e.container.querySelectorAll("object, embed, iframe, video"), d = e.height, u = e.width, c = i, f = d * i / u, p = u * r / d, m = r, h = p > i == !1, v = h ? Math.floor(c) : Math.floor(p), y = h ? Math.floor(f) : Math.floor(m), g = h ? `${i}px` : `${v}px`, b = h ? `${y}px` : `${r}px`, E = 0, S = l.length; E < S; E++)l[E].style.height = b, l[E].style.width = g, e.media.setSize && e.media.setSize(g, b), l[E].style.marginLeft = `${Math.floor((i - v) / 2)}px`, l[E].style.marginTop = 0; } }, { key: "setDimensions", value(e, t) { const n = this; e = (0, m.isString)(e) && e.indexOf("%") > -1 ? e : `${parseFloat(e)}px`, t = (0, m.isString)(t) && t.indexOf("%") > -1 ? t : `${parseFloat(t)}px`, n.container.style.width = e, n.container.style.height = t; for (let o = n.layers.children, i = 0, r = o.length; i < r; i++)o[i].style.width = e, o[i].style.height = t; } }, { key: "setControlsSize", value() { const e = this; if (y.visible(e.container)) if (e.rail && y.visible(e.rail)) { for (var t = e.total ? getComputedStyle(e.total, null) : null, n = t ? parseFloat(t.marginLeft) + parseFloat(t.marginRight) : 0, o = getComputedStyle(e.rail), i = parseFloat(o.marginLeft) + parseFloat(o.marginRight), r = 0, a = y.siblings(e.rail, (t) => t !== e.rail), s = a.length, l = 0; l < s; l++)r += a[l].offsetWidth; r += n + (n === 0 ? 2 * i : i) + 1, e.container.style.minWidth = `${r}px`; const d = (0, m.createEvent)("controlsresize", e.container); e.container.dispatchEvent(d); } else { for (var u = e.controls.children, c = 0, f = 0, p = u.length; f < p; f++)c += u[f].offsetWidth; e.container.style.minWidth = `${c}px`; } } }, { key: "addControlElement", value(e, t) { const n = this; if (void 0 !== n.featurePosition[t]) { const o = n.controls.children[n.featurePosition[t] - 1]; o.parentNode.insertBefore(e, o.nextSibling); } else { n.controls.appendChild(e); for (let i = n.controls.children, r = 0, a = i.length; r < a; r++) if (e === i[r]) { n.featurePosition[t] = r; break; } } } }, { key: "createIframeLayer", value() { const e = this; if (e.isVideo && e.media.rendererName !== null && e.media.rendererName.indexOf("iframe") > -1 && !l.default.getElementById(`${e.media.id}-iframe-overlay`)) { const t = l.default.createElement("div"); const n = l.default.getElementById(`${e.media.id}_${e.media.rendererName}`); t.id = `${e.media.id}-iframe-overlay`, t.className = `${e.options.classPrefix}iframe-overlay`, t.addEventListener("click", (t) => { e.options.clickToPlayPause && (e.paused ? e.play() : e.pause(), t.preventDefault(), t.stopPropagation()); }), n.parentNode.insertBefore(t, n); } } }, { key: "resetSize", value() { const e = this; setTimeout(() => { e.setPlayerSize(e.width, e.height), e.setControlsSize(); }, 50); } }, { key: "setPoster", value(e) { const t = this; let n = t.container.querySelector(`.${t.options.classPrefix}poster`); n || ((n = l.default.createElement("div")).className = `${t.options.classPrefix}poster ${t.options.classPrefix}layer`, t.layers.appendChild(n)); let o = n.querySelector("img"); !o && e && ((o = l.default.createElement("img")).className = `${t.options.classPrefix}poster-img`, o.width = "100%", o.height = "100%", n.style.display = "", n.appendChild(o)), e ? (o.setAttribute("src", e), n.style.backgroundImage = `url("${e}")`, n.style.display = "") : o ? (n.style.backgroundImage = "none", n.style.display = "none", o.remove()) : n.style.display = "none"; } }, { key: "changeSkin", value(e) { const t = this; t.container.className = `${t.options.classPrefix}container ${e}`, t.setPlayerSize(t.width, t.height), t.setControlsSize(); } }, { key: "globalBind", value(e, t) { const n = this; const o = n.node ? n.node.ownerDocument : l.default; if ((e = (0, m.splitEvents)(e, n.id)).d) for (let i = e.d.split(" "), r = 0, a = i.length; r < a; r++)i[r].split(".").reduce((e, n) => (o.addEventListener(n, t, !1), n), ""); if (e.w) for (let d = e.w.split(" "), u = 0, c = d.length; u < c; u++)d[u].split(".").reduce((e, n) => (s.default.addEventListener(n, t, !1), n), ""); } }, { key: "globalUnbind", value(e, t) { const n = this; const o = n.node ? n.node.ownerDocument : l.default; if ((e = (0, m.splitEvents)(e, n.id)).d) for (let i = e.d.split(" "), r = 0, a = i.length; r < a; r++)i[r].split(".").reduce((e, n) => (o.removeEventListener(n, t, !1), n), ""); if (e.w) for (let d = e.w.split(" "), u = 0, c = d.length; u < c; u++)d[u].split(".").reduce((e, n) => (s.default.removeEventListener(n, t, !1), n), ""); } }, { key: "buildposter", value(e, t, n, o) { const i = this; const r = l.default.createElement("div"); r.className = `${i.options.classPrefix}poster ${i.options.classPrefix}layer`, n.appendChild(r); let a = o.originalNode.getAttribute("poster"); e.options.poster !== "" && (a && p.IS_IOS && o.originalNode.removeAttribute("poster"), a = e.options.poster), a ? i.setPoster(a) : i.media.renderer !== null && typeof i.media.renderer.getPosterUrl === "function" ? i.setPoster(i.media.renderer.getPosterUrl()) : r.style.display = "none", o.addEventListener("play", () => { r.style.display = "none"; }), o.addEventListener("playing", () => { r.style.display = "none"; }), e.options.showPosterWhenEnded && e.options.autoRewind && o.addEventListener("ended", () => { r.style.display = ""; }), o.addEventListener("error", () => { r.style.display = "none"; }), e.options.showPosterWhenPaused && o.addEventListener("pause", () => { e.ended || (r.style.display = ""); }); } }, { key: "buildoverlays", value(e, t, n, o) { if (e.isVideo) { const i = this; const r = l.default.createElement("div"); const a = l.default.createElement("div"); const s = l.default.createElement("div"); r.style.display = "none", r.className = `${i.options.classPrefix}overlay ${i.options.classPrefix}layer`, r.innerHTML = `<div class="${i.options.classPrefix}overlay-loading"><span class="${i.options.classPrefix}overlay-loading-bg-img"></span></div>`, n.appendChild(r), a.style.display = "none", a.className = `${i.options.classPrefix}overlay ${i.options.classPrefix}layer`, a.innerHTML = `<div class="${i.options.classPrefix}overlay-error"></div>`, n.appendChild(a), s.className = `${i.options.classPrefix}overlay ${i.options.classPrefix}layer ${i.options.classPrefix}overlay-play`, s.innerHTML = `<div class="${i.options.classPrefix}overlay-button" role="button" tabindex="0" aria-label="${f.default.t("mejs.play")}" aria-pressed="false"></div>`, s.addEventListener("click", () => { if (i.options.clickToPlayPause) { const e = i.container.querySelector(`.${i.options.classPrefix}overlay-button`); const t = e.getAttribute("aria-pressed"); i.paused ? i.play() : i.pause(), e.setAttribute("aria-pressed", !!t), i.container.focus(); } }), s.addEventListener("keydown", (e) => { const t = e.keyCode || e.which || 0; if (t === 13 || p.IS_FIREFOX && t === 32) { const n = (0, m.createEvent)("click", s); return s.dispatchEvent(n), !1; } }), n.appendChild(s), i.media.rendererName !== null && (/(youtube|facebook)/i.test(i.media.rendererName) && !(i.media.originalNode.getAttribute("poster") || e.options.poster || typeof i.media.renderer.getPosterUrl === "function" && i.media.renderer.getPosterUrl()) || p.IS_STOCK_ANDROID || i.media.originalNode.getAttribute("autoplay")) && (s.style.display = "none"); let d = !1; o.addEventListener("play", () => { s.style.display = "none", r.style.display = "none", a.style.display = "none", d = !1; }), o.addEventListener("playing", () => { s.style.display = "none", r.style.display = "none", a.style.display = "none", d = !1; }), o.addEventListener("seeking", () => { s.style.display = "none", r.style.display = "", d = !1; }), o.addEventListener("seeked", () => { s.style.display = i.paused && !p.IS_STOCK_ANDROID ? "" : "none", r.style.display = "none", d = !1; }), o.addEventListener("pause", () => { r.style.display = "none", p.IS_STOCK_ANDROID || d || (s.style.display = ""), d = !1; }), o.addEventListener("waiting", () => { r.style.display = "", d = !1; }), o.addEventListener("loadeddata", () => { r.style.display = "", p.IS_ANDROID && (o.canplayTimeout = setTimeout(() => { if (l.default.createEvent) { const e = l.default.createEvent("HTMLEvents"); return e.initEvent("canplay", !0, !0), o.dispatchEvent(e); } }, 300)), d = !1; }), o.addEventListener("canplay", () => { r.style.display = "none", clearTimeout(o.canplayTimeout), d = !1; }), o.addEventListener("error", (e) => { i._handleError(e, i.media, i.node), r.style.display = "none", s.style.display = "none", d = !0; }), o.addEventListener("loadedmetadata", () => { i.controlsEnabled || i.enableControls(); }), o.addEventListener("keydown", (t) => { i.onkeydown(e, o, t), d = !1; }); } } }, { key: "buildkeyboard", value(e, t, n, o) { const i = this; i.container.addEventListener("keydown", () => { i.keyboardAction = !0; }), i.globalKeydownCallback = function (t) { const n = l.default.activeElement.closest(`.${i.options.classPrefix}container`); const r = i.media.closest(`.${i.options.classPrefix}container`); return i.hasFocus = !(!n || !r || n.id !== r.id), i.onkeydown(e, o, t); }, i.globalClickCallback = function (e) { i.hasFocus = !!e.target.closest(`.${i.options.classPrefix}container`); }, i.globalBind("keydown", i.globalKeydownCallback), i.globalBind("click", i.globalClickCallback); } }, { key: "onkeydown", value(e, t, n) { if (e.hasFocus && e.options.enableKeyboard) for (let o = 0, i = e.options.keyActions.length; o < i; o++) for (let r = e.options.keyActions[o], a = 0, s = r.keys.length; a < s; a++) if (n.keyCode === r.keys[a]) return r.action(e, t, n.keyCode, n), n.preventDefault(), void n.stopPropagation(); return !0; } }, { key: "play", value() { this.proxy.play(); } }, { key: "pause", value() { this.proxy.pause(); } }, { key: "load", value() { this.proxy.load(); } }, { key: "setCurrentTime", value(e) { this.proxy.setCurrentTime(e); } }, { key: "getCurrentTime", value() { return this.proxy.currentTime; } }, { key: "getDuration", value() { return this.proxy.duration; } }, { key: "setVolume", value(e) { this.proxy.volume = e; } }, { key: "getVolume", value() { return this.proxy.getVolume(); } }, { key: "setMuted", value(e) { this.proxy.setMuted(e); } }, { key: "setSrc", value(e) { this.controlsEnabled || this.enableControls(), this.proxy.setSrc(e); } }, { key: "getSrc", value() { return this.proxy.getSrc(); } }, { key: "canPlayType", value(e) { return this.proxy.canPlayType(e); } }, { key: "remove", value() { const e = this; const t = e.media.rendererName; const n = e.media.originalNode.src; for (const o in e.options.features) { const i = e.options.features[o]; if (e[`clean${i}`]) try { e[`clean${i}`](e, e.layers, e.controls, e.media); } catch (e) { console.error(`error cleaning ${i}`, e); } } let a = e.node.getAttribute("width"); let s = e.node.getAttribute("height"); a ? a.indexOf("%") === -1 && (a += "px") : a = "auto", s ? s.indexOf("%") === -1 && (s += "px") : s = "auto", e.node.style.width = a, e.node.style.height = s, e.setPlayerSize(0, 0), e.isDynamic ? e.container.parentNode.insertBefore(e.node, e.container) : (function () { e.node.setAttribute("controls", !0), e.node.setAttribute("id", e.node.getAttribute("id").replace(`_${t}`, "").replace("_from_mejs", "")); const o = e.container.querySelector(`.${e.options.classPrefix}poster>img`); o && e.node.setAttribute("poster", o.src), delete e.node.autoplay, e.media.canPlayType((0, v.getTypeFromFile)(n)) !== "" && e.node.setAttribute("src", n), ~t.indexOf("iframe") && l.default.getElementById(`${e.media.id}-iframe-overlay`).remove(); const i = e.node.cloneNode(); if (i.style.display = "", e.container.parentNode.insertBefore(i, e.container), e.node.remove(), e.mediaFiles) for (let r = 0, a = e.mediaFiles.length; r < a; r++) { const s = l.default.createElement("source"); s.setAttribute("src", e.mediaFiles[r].src), s.setAttribute("type", e.mediaFiles[r].type), i.appendChild(s); } if (e.trackFiles) for (let d = 0, u = e.trackFiles.length; d < u; d++)!(function (t, n) { const o = e.trackFiles[t]; const r = l.default.createElement("track"); r.kind = o.kind, r.label = o.label, r.srclang = o.srclang, r.src = o.src, i.appendChild(r), r.addEventListener("load", function () { this.mode = "showing", i.textTracks[t].mode = "showing"; }); }(d)); delete e.node, delete e.mediaFiles, delete e.trackFiles; }()), typeof e.media.renderer.destroy === "function" && e.media.renderer.destroy(), delete d.default.players[e.id], r(e.container) === "object" && (e.container.parentNode.querySelector(`.${e.options.classPrefix}offscreen`).remove(), e.container.remove()), e.globalUnbind("resize", e.globalResizeCallback), e.globalUnbind("keydown", e.globalKeydownCallback), e.globalUnbind("click", e.globalClickCallback), delete e.media.player; } }, { key: "paused", get() { return this.proxy.paused; } }, { key: "muted", get() { return this.proxy.muted; }, set(e) { this.setMuted(e); } }, { key: "ended", get() { return this.proxy.ended; } }, { key: "readyState", get() { return this.proxy.readyState; } }, { key: "currentTime", set(e) { this.setCurrentTime(e); }, get() { return this.getCurrentTime(); } }, { key: "duration", get() { return this.getDuration(); } }, { key: "volume", set(e) { this.setVolume(e); }, get() { return this.getVolume(); } }, { key: "src", set(e) { this.setSrc(e); }, get() { return this.getSrc(); } }]), e;
    }()); s.default.MediaElementPlayer = b, d.default.MediaElementPlayer = b, n.default = b;
  }, {
    17: 17, 2: 2, 25: 25, 26: 26, 27: 27, 28: 28, 3: 3, 30: 30, 5: 5, 6: 6, 7: 7
  }],
  17: [function (e, t, n) {
    function o(e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function"); }Object.defineProperty(n, "__esModule", { value: !0 }); const i = (function () { function e(e, t) { for (let n = 0; n < t.length; n++) { const o = t[n]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, o.key, o); } } return function (t, n, o) { return n && e(t.prototype, n), o && e(t, o), t; }; }()); const r = (function (e) { return e && e.__esModule ? e : { default: e }; }(e(3))); const a = (function () { function e(t) { return o(this, e), this.media = t.media, this.isVideo = t.isVideo, this.classPrefix = t.options.classPrefix, this.createIframeLayer = function () { return t.createIframeLayer(); }, this.setPoster = function (e) { return t.setPoster(e); }, this; } return i(e, [{ key: "play", value() { this.media.play(); } }, { key: "pause", value() { this.media.pause(); } }, { key: "load", value() { const e = this; e.isLoaded || e.media.load(), e.isLoaded = !0; } }, { key: "setCurrentTime", value(e) { this.media.setCurrentTime(e); } }, { key: "getCurrentTime", value() { return this.media.currentTime; } }, { key: "getDuration", value() { return this.media.getDuration(); } }, { key: "setVolume", value(e) { this.media.setVolume(e); } }, { key: "getVolume", value() { return this.media.getVolume(); } }, { key: "setMuted", value(e) { this.media.setMuted(e); } }, { key: "setSrc", value(e) { const t = this; const n = document.getElementById(`${t.media.id}-iframe-overlay`); n && n.remove(), t.media.setSrc(e), t.createIframeLayer(), t.media.renderer !== null && typeof t.media.renderer.getPosterUrl === "function" && t.setPoster(t.media.renderer.getPosterUrl()); } }, { key: "getSrc", value() { return this.media.getSrc(); } }, { key: "canPlayType", value(e) { return this.media.canPlayType(e); } }, { key: "paused", get() { return this.media.paused; } }, { key: "muted", set(e) { this.setMuted(e); }, get() { return this.media.muted; } }, { key: "ended", get() { return this.media.ended; } }, { key: "readyState", get() { return this.media.readyState; } }, { key: "currentTime", set(e) { this.setCurrentTime(e); }, get() { return this.getCurrentTime(); } }, { key: "duration", get() { return this.getDuration(); } }, { key: "volume", set(e) { this.setVolume(e); }, get() { return this.getVolume(); } }, { key: "src", set(e) { this.setSrc(e); }, get() { return this.getSrc(); } }]), e; }()); n.default = a, r.default.DefaultPlayer = a;
  }, { 3: 3 }],
  18: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = o(e(3)); const r = o(e(7)); const a = o(e(16)); typeof jQuery !== "undefined" ? r.default.$ = i.default.jQuery = i.default.$ = jQuery : typeof Zepto !== "undefined" ? r.default.$ = i.default.Zepto = i.default.$ = Zepto : typeof ender !== "undefined" && (r.default.$ = i.default.ender = i.default.$ = ender), (function (e) { void 0 !== e && (e.fn.mediaelementplayer = function (t) { return !1 === t ? this.each(function () { const t = e(this).data("mediaelementplayer"); t && t.remove(), e(this).removeData("mediaelementplayer"); }) : this.each(function () { e(this).data("mediaelementplayer", new a.default(this, t)); }), this; }, e(document).ready(() => { e(`.${r.default.MepDefaults.classPrefix}player`).mediaelementplayer(); })); }(r.default.$));
  }, { 16: 16, 3: 3, 7: 7 }],
  19: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (e) { return typeof e; } : function (e) { return e && typeof Symbol === "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; }; const r = o(e(3)); const a = o(e(7)); const s = e(8); const l = e(27); const d = e(28); const u = e(25); const c = e(26); var f = { promise: null, load(e) { return typeof dashjs !== "undefined" ? f.promise = new Promise(((e) => { e(); })).then(() => { f._createPlayer(e); }) : (e.options.path = typeof e.options.path === "string" ? e.options.path : "https://cdn.dashjs.org/latest/dash.all.min.js", f.promise = f.promise || (0, c.loadScript)(e.options.path), f.promise.then(() => { f._createPlayer(e); })), f.promise; }, _createPlayer(e) { const t = dashjs.MediaPlayer().create(); return r.default[`__ready__${e.id}`](t), t; } }; const p = {
      name: "native_dash",
      options: {
        prefix: "native_dash",
        dash: {
          path: "https://cdn.dashjs.org/latest/dash.all.min.js", debug: !1, drm: {}, robustnessLevel: ""
        }
      },
      canPlayType(e) { return u.HAS_MSE && ["application/dash+xml"].indexOf(e.toLowerCase()) > -1; },
      create(e, t, n) { const o = e.originalNode; const d = `${e.id}_${t.prefix}`; const u = o.autoplay; const c = o.children; let p = null; let m = null; o.removeAttribute("type"); for (let h = 0, v = c.length; h < v; h++)c[h].removeAttribute("type"); p = o.cloneNode(!0), t = Object.assign(t, e.options); for (var y = a.default.html5media.properties, g = a.default.html5media.events.concat(["click", "mouseover", "mouseout"]), b = function (t) { if (t.type !== "error") { const n = (0, l.createEvent)(t.type, e); e.dispatchEvent(n); } }, E = 0, S = y.length; E < S; E++)!(function (e) { const n = `${e.substring(0, 1).toUpperCase()}${e.substring(1)}`; p[`get${n}`] = function () { return m !== null ? p[e] : null; }, p[`set${n}`] = function (n) { if (a.default.html5media.readOnlyProperties.indexOf(e) === -1) if (e === "src") { const o = (void 0 === n ? "undefined" : i(n)) === "object" && n.src ? n.src : n; if (p[e] = o, m !== null) { m.reset(); for (let r = 0, s = g.length; r < s; r++)p.removeEventListener(g[r], b); m = f._createPlayer({ options: t.dash, id: d }), n && (void 0 === n ? "undefined" : i(n)) === "object" && i(n.drm) === "object" && (m.setProtectionData(n.drm), (0, l.isString)(t.dash.robustnessLevel) && t.dash.robustnessLevel && m.getProtectionController().setRobustnessLevel(t.dash.robustnessLevel)), m.attachSource(o), u && m.play(); } } else p[e] = n; }; }(y[E])); if (r.default[`__ready__${d}`] = function (n) { e.dashPlayer = m = n; for (var o = dashjs.MediaPlayer.events, r = 0, s = g.length; r < s; r++)!(function (e) { e === "loadedmetadata" && (m.getDebug().setLogToBrowserConsole(t.dash.debug), m.initialize(), m.setScheduleWhilePaused(!1), m.setFastSwitchEnabled(!0), m.attachView(p), m.setAutoPlay(!1), i(t.dash.drm) !== "object" || a.default.Utils.isObjectEmpty(t.dash.drm) || (m.setProtectionData(t.dash.drm), (0, l.isString)(t.dash.robustnessLevel) && t.dash.robustnessLevel && m.getProtectionController().setRobustnessLevel(t.dash.robustnessLevel)), m.attachSource(p.getSrc())), p.addEventListener(e, b); }(g[r])); const d = function (t, n) { if (t.toLowerCase() === "error")e.generateError(n.message, p.src), console.error(n); else { const o = (0, l.createEvent)(t, e); o.data = n, e.dispatchEvent(o); } }; for (const u in o)o.hasOwnProperty(u) && m.on(o[u], function (e) { for (var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++)n[o - 1] = arguments[o]; return d(e.type, n); }); }, n && n.length > 0) for (let x = 0, w = n.length; x < w; x++) if (s.renderer.renderers[t.prefix].canPlayType(n[x].type)) { p.setAttribute("src", n[x].src), void 0 !== n[x].drm && (t.dash.drm = n[x].drm); break; }p.setAttribute("id", d), o.parentNode.insertBefore(p, o), o.autoplay = !1, o.style.display = "none", p.setSize = function (e, t) { return p.style.width = `${e}px`, p.style.height = `${t}px`, p; }, p.hide = function () { return p.pause(), p.style.display = "none", p; }, p.show = function () { return p.style.display = "", p; }, p.destroy = function () { m !== null && m.reset(); }; const P = (0, l.createEvent)("rendererready", p); return e.dispatchEvent(P), e.promises.push(f.load({ options: t.dash, id: d })), p; }
    }; d.typeChecks.push((e) => (~e.toLowerCase().indexOf(".mpd") ? "application/dash+xml" : null)), s.renderer.add(p);
  }, {
    25: 25, 26: 26, 27: 27, 28: 28, 3: 3, 7: 7, 8: 8
  }],
  20: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; }Object.defineProperty(n, "__esModule", { value: !0 }), n.PluginDetector = void 0; const i = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (e) { return typeof e; } : function (e) { return e && typeof Symbol === "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; }; const r = o(e(3)); const a = o(e(2)); const s = o(e(7)); const l = o(e(5)); const d = e(8); const u = e(27); const c = e(25); const f = e(28); var p = n.PluginDetector = {
      plugins: [], hasPluginVersion(e, t) { const n = p.plugins[e]; return t[1] = t[1] || 0, t[2] = t[2] || 0, n[0] > t[0] || n[0] === t[0] && n[1] > t[1] || n[0] === t[0] && n[1] === t[1] && n[2] >= t[2]; }, addPlugin(e, t, n, o, i) { p.plugins[e] = p.detectPlugin(t, n, o, i); }, detectPlugin(e, t, n, o) { let a = [0, 0, 0]; let s = void 0; let l = void 0; if (c.NAV.plugins !== null && void 0 !== c.NAV.plugins && i(c.NAV.plugins[e]) === "object") { if ((s = c.NAV.plugins[e].description) && (void 0 === c.NAV.mimeTypes || !c.NAV.mimeTypes[t] || c.NAV.mimeTypes[t].enabledPlugin)) for (let d = 0, u = (a = s.replace(e, "").replace(/^\s+/, "").replace(/\sr/gi, ".").split(".")).length; d < u; d++)a[d] = parseInt(a[d].match(/\d+/), 10); } else if (void 0 !== r.default.ActiveXObject) try { (l = new ActiveXObject(n)) && (a = o(l)); } catch (e) {} return a; }
    }; p.addPlugin("flash", "Shockwave Flash", "application/x-shockwave-flash", "ShockwaveFlash.ShockwaveFlash", (e) => { let t = []; let n = e.GetVariable("$version"); return n && (n = n.split(" ")[1].split(","), t = [parseInt(n[0], 10), parseInt(n[1], 10), parseInt(n[2], 10)]), t; }); const m = { create(e, t, n) { const o = {}; let i = !1; o.options = t, o.id = `${e.id}_${o.options.prefix}`, o.mediaElement = e, o.flashState = {}, o.flashApi = null, o.flashApiStack = []; for (let p = s.default.html5media.properties, m = 0, h = p.length; m < h; m++)!(function (e) { o.flashState[e] = null; const t = `${e.substring(0, 1).toUpperCase()}${e.substring(1)}`; o[`get${t}`] = function () { if (o.flashApi !== null) { if (typeof o.flashApi[`get_${e}`] === "function") { const t = o.flashApi[`get_${e}`](); return e === "buffered" ? { start() { return 0; }, end() { return t; }, length: 1 } : t; } return null; } return null; }, o[`set${t}`] = function (t) { if (e === "src" && (t = (0, f.absolutizeUrl)(t)), o.flashApi !== null && void 0 !== o.flashApi[`set_${e}`]) try { o.flashApi[`set_${e}`](t); } catch (e) {} else o.flashApiStack.push({ type: "set", propName: e, value: t }); }; }(p[m])); const v = s.default.html5media.methods; v.push("stop"); for (let y = 0, g = v.length; y < g; y++)!(function (e) { o[e] = function () { if (i) if (o.flashApi !== null) { if (o.flashApi[`fire_${e}`]) try { o.flashApi[`fire_${e}`](); } catch (e) {} } else o.flashApiStack.push({ type: "call", methodName: e }); }; }(v[y])); for (let b = ["rendererready"], E = 0, S = b.length; E < S; E++) { const x = (0, u.createEvent)(b[E], o); e.dispatchEvent(x); }r.default[`__ready__${o.id}`] = function () { if (o.flashReady = !0, o.flashApi = a.default.getElementById(`__${o.id}`), o.flashApiStack.length) for (let e = 0, t = o.flashApiStack.length; e < t; e++) { const n = o.flashApiStack[e]; if (n.type === "set") { const i = n.propName; const r = `${i.substring(0, 1).toUpperCase()}${i.substring(1)}`; o[`set${r}`](n.value); } else n.type === "call" && o[n.methodName](); } }, r.default[`__event__${o.id}`] = function (e, t) { const n = (0, u.createEvent)(e, o); if (t) try { n.data = JSON.parse(t), n.details.data = JSON.parse(t); } catch (e) { n.message = t; }o.mediaElement.dispatchEvent(n); }, o.flashWrapper = a.default.createElement("div"), ["always", "sameDomain"].indexOf(o.options.shimScriptAccess) === -1 && (o.options.shimScriptAccess = "sameDomain"); const w = e.originalNode.autoplay; const P = [`uid=${o.id}`, `autoplay=${w}`, `allowScriptAccess=${o.options.shimScriptAccess}`, `preload=${e.originalNode.getAttribute("preload") || ""}`]; const T = e.originalNode !== null && e.originalNode.tagName.toLowerCase() === "video"; const C = T ? e.originalNode.height : 1; const k = T ? e.originalNode.width : 1; e.originalNode.getAttribute("src") && P.push(`src=${e.originalNode.getAttribute("src")}`), !0 === o.options.enablePseudoStreaming && (P.push(`pseudostreamstart=${o.options.pseudoStreamingStartQueryParam}`), P.push(`pseudostreamtype=${o.options.pseudoStreamingType}`)), e.appendChild(o.flashWrapper), e.originalNode.style.display = "none"; let _ = []; if (c.IS_IE || c.IS_EDGE) { const N = a.default.createElement("div"); o.flashWrapper.appendChild(N), _ = c.IS_EDGE ? ['type="application/x-shockwave-flash"', `data="${o.options.pluginPath}${o.options.filename}"`, `id="__${o.id}"`, `width="${k}"`, `height="${C}'"`] : ['classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"', 'codebase="//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab"', `id="__${o.id}"`, `width="${k}"`, `height="${C}"`], T || _.push('style="clip: rect(0 0 0 0); position: absolute;"'), N.outerHTML = `<object ${_.join(" ")}><param name="movie" value="${o.options.pluginPath}${o.options.filename}?x=${new Date()}" /><param name="flashvars" value="${P.join("&amp;")}" /><param name="quality" value="high" /><param name="bgcolor" value="#000000" /><param name="wmode" value="transparent" /><param name="allowScriptAccess" value="${o.options.shimScriptAccess}" /><param name="allowFullScreen" value="true" /><div>${l.default.t("mejs.install-flash")}</div></object>`; } else _ = [`id="__${o.id}"`, `name="__${o.id}"`, 'play="true"', 'loop="false"', 'quality="high"', 'bgcolor="#000000"', 'wmode="transparent"', `allowScriptAccess="${o.options.shimScriptAccess}"`, 'allowFullScreen="true"', 'type="application/x-shockwave-flash"', 'pluginspage="//www.macromedia.com/go/getflashplayer"', `src="${o.options.pluginPath}${o.options.filename}"`, `flashvars="${P.join("&")}"`], T ? (_.push(`width="${k}"`), _.push(`height="${C}"`)) : _.push('style="position: fixed; left: -9999em; top: -9999em;"'), o.flashWrapper.innerHTML = `<embed ${_.join(" ")}>`; if (o.flashNode = o.flashWrapper.lastChild, o.hide = function () { i = !1, T && (o.flashNode.style.display = "none"); }, o.show = function () { i = !0, T && (o.flashNode.style.display = ""); }, o.setSize = function (e, t) { o.flashNode.style.width = `${e}px`, o.flashNode.style.height = `${t}px`, o.flashApi !== null && typeof o.flashApi.fire_setSize === "function" && o.flashApi.fire_setSize(e, t); }, o.destroy = function () { o.flashNode.remove(); }, n && n.length > 0) for (let A = 0, L = n.length; A < L; A++) if (d.renderer.renderers[t.prefix].canPlayType(n[A].type)) { o.setSrc(n[A].src); break; } return o; } }; if (p.hasPluginVersion("flash", [10, 0, 0])) {
      f.typeChecks.push((e) => ((e = e.toLowerCase()).startsWith("rtmp") ? ~e.indexOf(".mp3") ? "audio/rtmp" : "video/rtmp" : /\.og(a|g)/i.test(e) ? "audio/ogg" : ~e.indexOf(".m3u8") ? "application/x-mpegURL" : ~e.indexOf(".mpd") ? "application/dash+xml" : ~e.indexOf(".flv") ? "video/flv" : null)); const h = {
        name: "flash_video",
        options: {
          prefix: "flash_video", filename: "mediaelement-flash-video.swf", enablePseudoStreaming: !1, pseudoStreamingStartQueryParam: "start", pseudoStreamingType: "byte"
        },
        canPlayType(e) { return ~["video/mp4", "video/rtmp", "audio/rtmp", "rtmp/mp4", "audio/mp4", "video/flv", "video/x-flv"].indexOf(e.toLowerCase()); },
        create: m.create
      }; d.renderer.add(h); const v = {
        name: "flash_hls", options: { prefix: "flash_hls", filename: "mediaelement-flash-video-hls.swf" }, canPlayType(e) { return ~["application/x-mpegurl", "application/vnd.apple.mpegurl", "audio/mpegurl", "audio/hls", "video/hls"].indexOf(e.toLowerCase()); }, create: m.create
      }; d.renderer.add(v); const y = {
        name: "flash_dash", options: { prefix: "flash_dash", filename: "mediaelement-flash-video-mdash.swf" }, canPlayType(e) { return ~["application/dash+xml"].indexOf(e.toLowerCase()); }, create: m.create
      }; d.renderer.add(y); const g = {
        name: "flash_audio", options: { prefix: "flash_audio", filename: "mediaelement-flash-audio.swf" }, canPlayType(e) { return ~["audio/mp3"].indexOf(e.toLowerCase()); }, create: m.create
      }; d.renderer.add(g); const b = {
        name: "flash_audio_ogg", options: { prefix: "flash_audio_ogg", filename: "mediaelement-flash-audio-ogg.swf" }, canPlayType(e) { return ~["audio/ogg", "audio/oga", "audio/ogv"].indexOf(e.toLowerCase()); }, create: m.create
      }; d.renderer.add(b);
    }
  }, {
    2: 2, 25: 25, 27: 27, 28: 28, 3: 3, 5: 5, 7: 7, 8: 8
  }],
  21: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (e) { return typeof e; } : function (e) { return e && typeof Symbol === "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; }; const r = o(e(3)); const a = o(e(7)); const s = e(8); const l = e(27); const d = e(25); const u = e(28); const c = e(26); var f = { promise: null, load(e) { return typeof flvjs !== "undefined" ? f.promise = new Promise(((e) => { e(); })).then(() => { f._createPlayer(e); }) : (e.options.path = typeof e.options.path === "string" ? e.options.path : "https://cdnjs.cloudflare.com/ajax/libs/flv.js/1.3.3/flv.min.js", f.promise = f.promise || (0, c.loadScript)(e.options.path), f.promise.then(() => { f._createPlayer(e); })), f.promise; }, _createPlayer(e) { flvjs.LoggingControl.enableDebug = e.options.debug, flvjs.LoggingControl.enableVerbose = e.options.debug; const t = flvjs.createPlayer(e.options, e.configs); return r.default[`__ready__${e.id}`](t), t; } }; const p = {
      name: "native_flv", options: { prefix: "native_flv", flv: { path: "https://cdnjs.cloudflare.com/ajax/libs/flv.js/1.3.3/flv.min.js", cors: !0, debug: !1 } }, canPlayType(e) { return d.HAS_MSE && ["video/x-flv", "video/flv"].indexOf(e.toLowerCase()) > -1; }, create(e, t, n) { const o = e.originalNode; const d = `${e.id}_${t.prefix}`; let u = null; let c = null; u = o.cloneNode(!0), t = Object.assign(t, e.options); for (var p = a.default.html5media.properties, m = a.default.html5media.events.concat(["click", "mouseover", "mouseout"]), h = function (t) { if (t.type !== "error") { const n = (0, l.createEvent)(t.type, e); e.dispatchEvent(n); } }, v = 0, y = p.length; v < y; v++)!(function (e) { const n = `${e.substring(0, 1).toUpperCase()}${e.substring(1)}`; u[`get${n}`] = function () { return c !== null ? u[e] : null; }, u[`set${n}`] = function (n) { if (a.default.html5media.readOnlyProperties.indexOf(e) === -1) if (e === "src") { if (u[e] = (void 0 === n ? "undefined" : i(n)) === "object" && n.src ? n.src : n, c !== null) { const o = {}; o.type = "flv", o.url = n, o.cors = t.flv.cors, o.debug = t.flv.debug, o.path = t.flv.path; const r = t.flv.configs; c.destroy(); for (let s = 0, l = m.length; s < l; s++)u.removeEventListener(m[s], h); (c = f._createPlayer({ options: o, configs: r, id: d })).attachMediaElement(u), c.load(); } } else u[e] = n; }; }(p[v])); if (r.default[`__ready__${d}`] = function (t) { e.flvPlayer = c = t; for (var n = flvjs.Events, o = 0, i = m.length; o < i; o++)!(function (e) { e === "loadedmetadata" && (c.unload(), c.detachMediaElement(), c.attachMediaElement(u), c.load()), u.addEventListener(e, h); }(m[o])); const r = function (t, n) { if (t === "error") { const o = `${n[0]}: ${n[1]} ${n[2].msg}`; e.generateError(o, u.src); } else { const i = (0, l.createEvent)(t, e); i.data = n, e.dispatchEvent(i); } }; for (const a in n)!(function (e) { n.hasOwnProperty(e) && c.on(n[e], function () { for (var t = arguments.length, o = Array(t), i = 0; i < t; i++)o[i] = arguments[i]; return r(n[e], o); }); }(a)); }, n && n.length > 0) for (let g = 0, b = n.length; g < b; g++) if (s.renderer.renderers[t.prefix].canPlayType(n[g].type)) { u.setAttribute("src", n[g].src); break; }u.setAttribute("id", d), o.parentNode.insertBefore(u, o), o.autoplay = !1, o.style.display = "none"; const E = {}; E.type = "flv", E.url = u.src, E.cors = t.flv.cors, E.debug = t.flv.debug, E.path = t.flv.path; const S = t.flv.configs; u.setSize = function (e, t) { return u.style.width = `${e}px`, u.style.height = `${t}px`, u; }, u.hide = function () { return c !== null && c.pause(), u.style.display = "none", u; }, u.show = function () { return u.style.display = "", u; }, u.destroy = function () { c !== null && c.destroy(); }; const x = (0, l.createEvent)("rendererready", u); return e.dispatchEvent(x), e.promises.push(f.load({ options: E, configs: S, id: d })), u; }
    }; u.typeChecks.push((e) => (~e.toLowerCase().indexOf(".flv") ? "video/flv" : null)), s.renderer.add(p);
  }, {
    25: 25, 26: 26, 27: 27, 28: 28, 3: 3, 7: 7, 8: 8
  }],
  22: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (e) { return typeof e; } : function (e) { return e && typeof Symbol === "function" && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e; }; const r = o(e(3)); const a = o(e(7)); const s = e(8); const l = e(27); const d = e(25); const u = e(28); const c = e(26); var f = { promise: null, load(e) { return typeof Hls !== "undefined" ? f.promise = new Promise(((e) => { e(); })).then(() => { f._createPlayer(e); }) : (e.options.path = typeof e.options.path === "string" ? e.options.path : "https://cdnjs.cloudflare.com/ajax/libs/hls.js/0.8.2/hls.min.js", f.promise = f.promise || (0, c.loadScript)(e.options.path), f.promise.then(() => { f._createPlayer(e); })), f.promise; }, _createPlayer(e) { const t = new Hls(e.options); return r.default[`__ready__${e.id}`](t), t; } }; const p = {
      name: "native_hls", options: { prefix: "native_hls", hls: { path: "https://cdnjs.cloudflare.com/ajax/libs/hls.js/0.8.2/hls.min.js", autoStartLoad: !1, debug: !1 } }, canPlayType(e) { return d.HAS_MSE && ["application/x-mpegurl", "application/vnd.apple.mpegurl", "audio/mpegurl", "audio/hls", "video/hls"].indexOf(e.toLowerCase()) > -1; }, create(e, t, n) { const o = e.originalNode; const d = `${e.id}_${t.prefix}`; const u = o.getAttribute("preload"); const c = o.autoplay; let p = null; let m = null; let h = 0; const v = n.length; m = o.cloneNode(!0), (t = Object.assign(t, e.options)).hls.autoStartLoad = u && u !== "none" || c; for (var y = a.default.html5media.properties, g = a.default.html5media.events.concat(["click", "mouseover", "mouseout"]), b = function (t) { if (t.type !== "error") { const n = (0, l.createEvent)(t.type, e); e.dispatchEvent(n); } }, E = 0, S = y.length; E < S; E++)!(function (e) { const n = `${e.substring(0, 1).toUpperCase()}${e.substring(1)}`; m[`get${n}`] = function () { return p !== null ? m[e] : null; }, m[`set${n}`] = function (n) { if (a.default.html5media.readOnlyProperties.indexOf(e) === -1) if (e === "src") { if (m[e] = (void 0 === n ? "undefined" : i(n)) === "object" && n.src ? n.src : n, p !== null) { p.destroy(); for (let o = 0, r = g.length; o < r; o++)m.removeEventListener(g[o], b); (p = f._createPlayer({ options: t.hls, id: d })).loadSource(n), p.attachMedia(m); } } else m[e] = n; }; }(y[E])); if (r.default[`__ready__${d}`] = function (t) { e.hlsPlayer = p = t; for (var o = Hls.Events, i = 0, r = g.length; i < r; i++)!(function (t) { if (t === "loadedmetadata") { const n = e.originalNode.src; p.detachMedia(), p.loadSource(n), p.attachMedia(m); }m.addEventListener(t, b); }(g[i])); let a = void 0; let s = void 0; const d = function (t, o) { if (t === "hlsError") { if (console.warn(o), (o = o[1]).fatal) switch (o.type) { case "mediaError": var i = (new Date()).getTime(); if (!a || i - a > 3e3)a = (new Date()).getTime(), p.recoverMediaError(); else if (!s || i - s > 3e3)s = (new Date()).getTime(), console.warn("Attempting to swap Audio Codec and recover from media error"), p.swapAudioCodec(), p.recoverMediaError(); else { const r = "Cannot recover, last media error recovery failed"; e.generateError(r, m.src), console.error(r); } break; case "networkError": if (o.details === "manifestLoadError")h < v && (m.setSrc(n[h++].src), m.load(), m.play()); else { e.generateError("Network error", n), console.error("Network error"); } break; default: p.destroy(); } } else { const d = (0, l.createEvent)(t, e); d.data = o, e.dispatchEvent(d); } }; for (const u in o)!(function (e) { o.hasOwnProperty(e) && p.on(o[e], function () { for (var t = arguments.length, n = Array(t), i = 0; i < t; i++)n[i] = arguments[i]; return d(o[e], n); }); }(u)); }, v > 0) for (;h < v; h++) if (s.renderer.renderers[t.prefix].canPlayType(n[h].type)) { m.setAttribute("src", n[h].src); break; }u === "auto" || c || (m.addEventListener("play", () => { p !== null && p.startLoad(); }), m.addEventListener("pause", () => { p !== null && p.stopLoad(); })), m.setAttribute("id", d), o.parentNode.insertBefore(m, o), o.autoplay = !1, o.style.display = "none", m.setSize = function (e, t) { return m.style.width = `${e}px`, m.style.height = `${t}px`, m; }, m.hide = function () { return m.pause(), m.style.display = "none", m; }, m.show = function () { return m.style.display = "", m; }, m.destroy = function () { p !== null && (p.stopLoad(), p.destroy()); }; const x = (0, l.createEvent)("rendererready", m); return e.dispatchEvent(x), e.promises.push(f.load({ options: t.hls, id: d })), m; }
    }; u.typeChecks.push((e) => (~e.toLowerCase().indexOf(".m3u8") ? "application/x-mpegURL" : null)), s.renderer.add(p);
  }, {
    25: 25, 26: 26, 27: 27, 28: 28, 3: 3, 7: 7, 8: 8
  }],
  23: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = o(e(3)); const r = o(e(2)); const a = o(e(7)); const s = e(8); const l = e(27); const d = e(25); const u = {
      name: "html5", options: { prefix: "html5" }, canPlayType(e) { const t = r.default.createElement("video"); return d.IS_ANDROID && /\/mp(3|4)$/i.test(e) || ~["application/x-mpegurl", "vnd.apple.mpegurl", "audio/mpegurl", "audio/hls", "video/hls"].indexOf(e.toLowerCase()) && d.SUPPORTS_NATIVE_HLS ? "yes" : t.canPlayType ? t.canPlayType(e.toLowerCase()).replace(/no/, "") : ""; }, create(e, t, n) { const o = `${e.id}_${t.prefix}`; let i = !1; let d = null; void 0 === e.originalNode || e.originalNode === null ? (d = r.default.createElement("audio"), e.appendChild(d)) : d = e.originalNode, d.setAttribute("id", o); for (let u = a.default.html5media.properties, c = 0, f = u.length; c < f; c++)!(function (e) { const t = `${e.substring(0, 1).toUpperCase()}${e.substring(1)}`; d[`get${t}`] = function () { return d[e]; }, d[`set${t}`] = function (t) { a.default.html5media.readOnlyProperties.indexOf(e) === -1 && (d[e] = t); }; }(u[c])); for (let p = a.default.html5media.events.concat(["click", "mouseover", "mouseout"]), m = 0, h = p.length; m < h; m++)!(function (t) { d.addEventListener(t, (t) => { if (i) { const n = (0, l.createEvent)(t.type, t.target); e.dispatchEvent(n); } }); }(p[m])); d.setSize = function (e, t) { return d.style.width = `${e}px`, d.style.height = `${t}px`, d; }, d.hide = function () { return i = !1, d.style.display = "none", d; }, d.show = function () { return i = !0, d.style.display = "", d; }; let v = 0; const y = n.length; if (y > 0) for (;v < y; v++) if (s.renderer.renderers[t.prefix].canPlayType(n[v].type)) { d.setAttribute("src", n[v].src); break; }d.addEventListener("error", (t) => { t.target.error.code === 4 && i && (v < y ? (d.src = n[v++].src, d.load(), d.play()) : e.generateError("Media error: Format(s) not supported or source(s) not found", n)); }); const g = (0, l.createEvent)("rendererready", d); return e.dispatchEvent(g), d; }
    }; i.default.HtmlMediaElement = a.default.HtmlMediaElement = u, s.renderer.add(u);
  }, {
    2: 2, 25: 25, 27: 27, 3: 3, 7: 7, 8: 8
  }],
  24: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = o(e(3)); const r = o(e(2)); const a = o(e(7)); const s = e(8); const l = e(27); const d = e(28); const u = e(26); var c = {
      isIframeStarted: !1, isIframeLoaded: !1, iframeQueue: [], enqueueIframe(e) { c.isLoaded = typeof YT !== "undefined" && YT.loaded, c.isLoaded ? c.createIframe(e) : (c.loadIframeApi(), c.iframeQueue.push(e)); }, loadIframeApi() { c.isIframeStarted || ((0, u.loadScript)("https://www.youtube.com/player_api"), c.isIframeStarted = !0); }, iFrameReady() { for (c.isLoaded = !0, c.isIframeLoaded = !0; c.iframeQueue.length > 0;) { const e = c.iframeQueue.pop(); c.createIframe(e); } }, createIframe(e) { return new YT.Player(e.containerId, e); }, getYouTubeId(e) { let t = ""; return e.indexOf("?") > 0 ? (t = c.getYouTubeIdFromParam(e)) === "" && (t = c.getYouTubeIdFromUrl(e)) : t = c.getYouTubeIdFromUrl(e), (t = t.substring(t.lastIndexOf("/") + 1).split("?"))[0]; }, getYouTubeIdFromParam(e) { if (void 0 === e || e === null || !e.trim().length) return null; for (var t = e.split("?")[1].split("&"), n = "", o = 0, i = t.length; o < i; o++) { const r = t[o].split("="); if (r[0] === "v") { n = r[1]; break; } } return n; }, getYouTubeIdFromUrl(e) { return void 0 !== e && e !== null && e.trim().length ? (e = e.split("?")[0]).substring(e.lastIndexOf("/") + 1) : null; }, getYouTubeNoCookieUrl(e) { if (void 0 === e || e === null || !e.trim().length || e.indexOf("//www.youtube") === -1) return e; const t = e.split("/"); return t[2] = t[2].replace(".com", "-nocookie.com"), t.join("/"); }
    }; const f = {
      name: "youtube_iframe",
      options: {
        prefix: "youtube_iframe",
        youtube: {
          autoplay: 0, controls: 0, disablekb: 1, end: 0, loop: 0, modestbranding: 0, playsinline: 0, rel: 0, showinfo: 0, start: 0, iv_load_policy: 3, nocookie: !1, imageQuality: null
        }
      },
      canPlayType(e) { return ~["video/youtube", "video/x-youtube"].indexOf(e.toLowerCase()); },
      create(e, t, n) {
        const o = {}; const s = []; let d = null; let u = !0; let f = !1; let p = null; let m = 1; o.options = t, o.id = `${e.id}_${t.prefix}`, o.mediaElement = e; for (let h = a.default.html5media.properties, v = 0, y = h.length; v < y; v++)!(function (t) { const n = `${t.substring(0, 1).toUpperCase()}${t.substring(1)}`; o[`get${n}`] = function () { if (d !== null) { switch (t) { case "currentTime": return d.getCurrentTime(); case "duration": return d.getDuration(); case "volume": return m = d.getVolume() / 100; case "paused": return u; case "ended": return f; case "muted": return d.isMuted(); case "buffered": var e = d.getVideoLoadedFraction(); var n = d.getDuration(); return { start() { return 0; }, end() { return e * n; }, length: 1 }; case "src": return d.getVideoUrl(); case "readyState": return 4; } return null; } return null; }, o[`set${n}`] = function (n) { if (d !== null) switch (t) { case "src": var i = typeof n === "string" ? n : n[0].src; var r = c.getYouTubeId(i); e.originalNode.autoplay ? d.loadVideoById(r) : d.cueVideoById(r); break; case "currentTime": d.seekTo(n); break; case "muted": n ? d.mute() : d.unMute(), setTimeout(() => { const t = (0, l.createEvent)("volumechange", o); e.dispatchEvent(t); }, 50); break; case "volume": m = n, d.setVolume(100 * n), setTimeout(() => { const t = (0, l.createEvent)("volumechange", o); e.dispatchEvent(t); }, 50); break; case "readyState": var a = (0, l.createEvent)("canplay", o); e.dispatchEvent(a); } else s.push({ type: "set", propName: t, value: n }); }; }(h[v])); for (let g = a.default.html5media.methods, b = 0, E = g.length; b < E; b++)!(function (e) { o[e] = function () { if (d !== null) switch (e) { case "play": return u = !1, d.playVideo(); case "pause": return u = !0, d.pauseVideo(); case "load": return null; } else s.push({ type: "call", methodName: e }); }; }(g[b])); const S = r.default.createElement("div"); S.id = o.id, o.options.youtube.nocookie && (e.originalNode.src = c.getYouTubeNoCookieUrl(n[0].src)), e.originalNode.parentNode.insertBefore(S, e.originalNode), e.originalNode.style.display = "none"; const x = e.originalNode.tagName.toLowerCase() === "audio"; const w = x ? "1" : e.originalNode.height; const P = x ? "1" : e.originalNode.width; const T = c.getYouTubeId(n[0].src); const C = {
          id: o.id,
          containerId: S.id,
          videoId: T,
          height: w,
          width: P,
          playerVars: {
            controls: 0, rel: 0, disablekb: 1, showinfo: 0, modestbranding: 0, html5: 1, playsinline: 0, start: 0, end: 0, iv_load_policy: 3, ...o.options.youtube
          },
          origin: i.default.location.host,
          events: { onReady(t) { if (e.youTubeApi = d = t.target, e.youTubeState = { paused: !0, ended: !1 }, s.length) for (let n = 0, i = s.length; n < i; n++) { const r = s[n]; if (r.type === "set") { const a = r.propName; const u = `${a.substring(0, 1).toUpperCase()}${a.substring(1)}`; o[`set${u}`](r.value); } else r.type === "call" && o[r.methodName](); }p = d.getIframe(), e.originalNode.getAttribute("muted") && d.mute(); for (let c = ["mouseover", "mouseout"], f = 0, m = c.length; f < m; f++)p.addEventListener(c[f], (t) => { const n = (0, l.createEvent)(t.type, o); e.dispatchEvent(n); }, !1); for (let h = ["rendererready", "loadedmetadata", "loadeddata", "canplay"], v = 0, y = h.length; v < y; v++) { const g = (0, l.createEvent)(h[v], o); e.dispatchEvent(g); } }, onStateChange(t) { let n = []; switch (t.data) { case -1: n = ["loadedmetadata"], u = !0, f = !1; break; case 0: n = ["ended"], u = !1, f = !o.options.youtube.loop, o.options.youtube.loop || o.stopInterval(); break; case 1: n = ["play", "playing"], u = !1, f = !1, o.startInterval(); break; case 2: n = ["pause"], u = !0, f = !1, o.stopInterval(); break; case 3: n = ["progress"], f = !1; break; case 5: n = ["loadeddata", "loadedmetadata", "canplay"], u = !0, f = !1; } for (let i = 0, r = n.length; i < r; i++) { const a = (0, l.createEvent)(n[i], o); e.dispatchEvent(a); } }, onError(t) { const n = (0, l.createEvent)("error", o); n.data = t.data, e.dispatchEvent(n); } }
        }; return x && (C.playerVars.playsinline = 1), e.originalNode.autoplay && (C.playerVars.autoplay = 1), e.originalNode.loop && (C.playerVars.loop = 1), c.enqueueIframe(C), o.onEvent = function (t, n, o) { o !== null && void 0 !== o && (e.youTubeState = o); }, o.setSize = function (e, t) { d !== null && d.setSize(e, t); }, o.hide = function () { o.stopInterval(), o.pause(), p && (p.style.display = "none"); }, o.show = function () { p && (p.style.display = ""); }, o.destroy = function () { d.destroy(); }, o.interval = null, o.startInterval = function () { o.interval = setInterval(() => { const t = (0, l.createEvent)("timeupdate", o); e.dispatchEvent(t); }, 250); }, o.stopInterval = function () { o.interval && clearInterval(o.interval); }, o.getPosterUrl = function () { const n = t.youtube.imageQuality; const o = ["default", "hqdefault", "mqdefault", "sddefault", "maxresdefault"]; const i = c.getYouTubeId(e.originalNode.src); return n && o.indexOf(n) > -1 && i ? `https://img.youtube.com/vi/${i}/${n}.jpg` : ""; }, o;
      }
    }; i.default.onYouTubePlayerAPIReady = function () { c.iFrameReady(); }, d.typeChecks.push((e) => (/\/\/(www\.youtube|youtu\.?be)/i.test(e) ? "video/x-youtube" : null)), s.renderer.add(f);
  }, {
    2: 2, 26: 26, 27: 27, 28: 28, 3: 3, 7: 7, 8: 8
  }],
  25: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; }Object.defineProperty(n, "__esModule", { value: !0 }), n.cancelFullScreen = n.requestFullScreen = n.isFullScreen = n.FULLSCREEN_EVENT_NAME = n.HAS_NATIVE_FULLSCREEN_ENABLED = n.HAS_TRUE_NATIVE_FULLSCREEN = n.HAS_IOS_FULLSCREEN = n.HAS_MS_NATIVE_FULLSCREEN = n.HAS_MOZ_NATIVE_FULLSCREEN = n.HAS_WEBKIT_NATIVE_FULLSCREEN = n.HAS_NATIVE_FULLSCREEN = n.SUPPORTS_NATIVE_HLS = n.SUPPORT_PASSIVE_EVENT = n.SUPPORT_POINTER_EVENTS = n.HAS_MSE = n.IS_STOCK_ANDROID = n.IS_SAFARI = n.IS_FIREFOX = n.IS_CHROME = n.IS_EDGE = n.IS_IE = n.IS_ANDROID = n.IS_IOS = n.IS_IPOD = n.IS_IPHONE = n.IS_IPAD = n.UA = n.NAV = void 0; for (var i = o(e(3)), r = o(e(2)), a = o(e(7)), s = n.NAV = i.default.navigator, l = n.UA = s.userAgent.toLowerCase(), d = n.IS_IPAD = /ipad/i.test(l) && !i.default.MSStream, u = n.IS_IPHONE = /iphone/i.test(l) && !i.default.MSStream, c = n.IS_IPOD = /ipod/i.test(l) && !i.default.MSStream, f = (n.IS_IOS = /ipad|iphone|ipod/i.test(l) && !i.default.MSStream, n.IS_ANDROID = /android/i.test(l)), p = n.IS_IE = /(trident|microsoft)/i.test(s.appName), m = (n.IS_EDGE = "msLaunchUri" in s && !("documentMode" in r.default)), h = n.IS_CHROME = /chrome/i.test(l), v = n.IS_FIREFOX = /firefox/i.test(l), y = n.IS_SAFARI = /safari/i.test(l) && !h, g = n.IS_STOCK_ANDROID = /^mozilla\/\d+\.\d+\s\(linux;\su;/i.test(l), b = (n.HAS_MSE = "MediaSource" in i.default), E = (n.SUPPORT_POINTER_EVENTS = (function () { const e = r.default.createElement("x"); const t = r.default.documentElement; const n = i.default.getComputedStyle; if (!("pointerEvents" in e.style)) return !1; e.style.pointerEvents = "auto", e.style.pointerEvents = "x", t.appendChild(e); const o = n && n(e, "").pointerEvents === "auto"; return e.remove(), !!o; }())), S = n.SUPPORT_PASSIVE_EVENT = (function () { let e = !1; try { const t = Object.defineProperty({}, "passive", { get() { e = !0; } }); i.default.addEventListener("test", null, t); } catch (e) {} return e; }()), x = ["source", "track", "audio", "video"], w = void 0, P = 0, T = x.length; P < T; P++)w = r.default.createElement(x[P]); const C = n.SUPPORTS_NATIVE_HLS = y || f && (h || g) || p && /edge/i.test(l); let k = void 0 !== w.webkitEnterFullscreen; let _ = void 0 !== w.requestFullscreen; k && /mac os x 10_5/i.test(l) && (_ = !1, k = !1); const N = void 0 !== w.webkitRequestFullScreen; const A = void 0 !== w.mozRequestFullScreen; const L = void 0 !== w.msRequestFullscreen; const F = N || A || L; let j = F; let I = ""; let M = void 0; let O = void 0; let D = void 0; A ? j = r.default.mozFullScreenEnabled : L && (j = r.default.msFullscreenEnabled), h && (k = !1), F && (N ? I = "webkitfullscreenchange" : A ? I = "mozfullscreenchange" : L && (I = "MSFullscreenChange"), n.isFullScreen = M = function () { return A ? r.default.mozFullScreen : N ? r.default.webkitIsFullScreen : L ? r.default.msFullscreenElement !== null : void 0; }, n.requestFullScreen = O = function (e) { N ? e.webkitRequestFullScreen() : A ? e.mozRequestFullScreen() : L && e.msRequestFullscreen(); }, n.cancelFullScreen = D = function () { N ? r.default.webkitCancelFullScreen() : A ? r.default.mozCancelFullScreen() : L && r.default.msExitFullscreen(); }); const V = n.HAS_NATIVE_FULLSCREEN = _; const R = n.HAS_WEBKIT_NATIVE_FULLSCREEN = N; const H = n.HAS_MOZ_NATIVE_FULLSCREEN = A; const U = n.HAS_MS_NATIVE_FULLSCREEN = L; const q = n.HAS_IOS_FULLSCREEN = k; const B = n.HAS_TRUE_NATIVE_FULLSCREEN = F; const z = n.HAS_NATIVE_FULLSCREEN_ENABLED = j; const W = n.FULLSCREEN_EVENT_NAME = I; n.isFullScreen = M, n.requestFullScreen = O, n.cancelFullScreen = D, a.default.Features = a.default.Features || {}, a.default.Features.isiPad = d, a.default.Features.isiPod = c, a.default.Features.isiPhone = u, a.default.Features.isiOS = a.default.Features.isiPhone || a.default.Features.isiPad, a.default.Features.isAndroid = f, a.default.Features.isIE = p, a.default.Features.isEdge = m, a.default.Features.isChrome = h, a.default.Features.isFirefox = v, a.default.Features.isSafari = y, a.default.Features.isStockAndroid = g, a.default.Features.hasMSE = b, a.default.Features.supportsNativeHLS = C, a.default.Features.supportsPointerEvents = E, a.default.Features.supportsPassiveEvent = S, a.default.Features.hasiOSFullScreen = q, a.default.Features.hasNativeFullscreen = V, a.default.Features.hasWebkitNativeFullScreen = R, a.default.Features.hasMozNativeFullScreen = H, a.default.Features.hasMsNativeFullScreen = U, a.default.Features.hasTrueNativeFullScreen = B, a.default.Features.nativeFullScreenEnabled = z, a.default.Features.fullScreenEventName = W, a.default.Features.isFullScreen = M, a.default.Features.requestFullScreen = O, a.default.Features.cancelFullScreen = D;
  }, { 2: 2, 3: 3, 7: 7 }],
  26: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } function i(e) { return new Promise(((t, n) => { const o = p.default.createElement("script"); o.src = e, o.async = !0, o.onload = function () { o.remove(), t(); }, o.onerror = function () { o.remove(), n(); }, p.default.head.appendChild(o); })); } function r(e) { const t = e.getBoundingClientRect(); const n = f.default.pageXOffset || p.default.documentElement.scrollLeft; const o = f.default.pageYOffset || p.default.documentElement.scrollTop; return { top: t.top + o, left: t.left + n }; } function a(e, t) { g(e, t) ? E(e, t) : b(e, t); } function s(e) { const t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 400; const n = arguments[2]; e.style.opacity || (e.style.opacity = 1); let o = null; f.default.requestAnimationFrame(function i(r) { const a = r - (o = o || r); const s = parseFloat(1 - a / t, 2); e.style.opacity = s < 0 ? 0 : s, a > t ? n && typeof n === "function" && n() : f.default.requestAnimationFrame(i); }); } function l(e) { const t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 400; const n = arguments[2]; e.style.opacity || (e.style.opacity = 0); let o = null; f.default.requestAnimationFrame(function i(r) { const a = r - (o = o || r); const s = parseFloat(a / t, 2); e.style.opacity = s > 1 ? 1 : s, a > t ? n && typeof n === "function" && n() : f.default.requestAnimationFrame(i); }); } function d(e, t) { const n = []; e = e.parentNode.firstChild; do { t && !t(e) || n.push(e); } while (e = e.nextSibling);return n; } function u(e) { return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length); } function c(e, t, n, o) { const i = f.default.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP"); let r = "application/x-www-form-urlencoded; charset=UTF-8"; let a = !1; let s = "*/".concat("*"); switch (t) { case "text": r = "text/plain"; break; case "json": r = "application/json, text/javascript"; break; case "html": r = "text/html"; break; case "xml": r = "application/xml, text/xml"; }r !== "application/x-www-form-urlencoded" && (s = `${r}, */*; q=0.01`), i && (i.open("GET", e, !0), i.setRequestHeader("Accept", s), i.onreadystatechange = function () { if (!a && i.readyState === 4) if (i.status === 200) { a = !0; let e = void 0; switch (t) { case "json": e = JSON.parse(i.responseText); break; case "xml": e = i.responseXML; break; default: e = i.responseText; }n(e); } else typeof o === "function" && o(i.status); }, i.send()); }Object.defineProperty(n, "__esModule", { value: !0 }), n.removeClass = n.addClass = n.hasClass = void 0, n.loadScript = i, n.offset = r, n.toggleClass = a, n.fadeOut = s, n.fadeIn = l, n.siblings = d, n.visible = u, n.ajax = c; var f = o(e(3)); var p = o(e(2)); const m = o(e(7)); let h = void 0; let v = void 0; let y = void 0; "classList" in p.default.documentElement ? (h = function (e, t) { return void 0 !== e.classList && e.classList.contains(t); }, v = function (e, t) { return e.classList.add(t); }, y = function (e, t) { return e.classList.remove(t); }) : (h = function (e, t) { return new RegExp(`\\b${t}\\b`).test(e.className); }, v = function (e, t) { g(e, t) || (e.className += ` ${t}`); }, y = function (e, t) { e.className = e.className.replace(new RegExp(`\\b${t}\\b`, "g"), ""); }); var g = n.hasClass = h; var b = n.addClass = v; var E = n.removeClass = y; m.default.Utils = m.default.Utils || {}, m.default.Utils.offset = r, m.default.Utils.hasClass = g, m.default.Utils.addClass = b, m.default.Utils.removeClass = E, m.default.Utils.toggleClass = a, m.default.Utils.fadeIn = l, m.default.Utils.fadeOut = s, m.default.Utils.siblings = d, m.default.Utils.visible = u, m.default.Utils.ajax = c, m.default.Utils.loadScript = i;
  }, { 2: 2, 3: 3, 7: 7 }],
  27: [function (e, t, n) {
    function o(e) {
      if (typeof e !== "string") throw new Error("Argument passed must be a string"); const t = {
        "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;"
      }; return e.replace(/[&<>"]/g, (e) => t[e]);
    } function i(e, t) { const n = this; const o = arguments; const i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]; if (typeof e !== "function") throw new Error("First argument must be a function"); if (typeof t !== "number") throw new Error("Second argument must be a numeric value"); let r = void 0; return function () { const a = n; const s = o; const l = i && !r; clearTimeout(r), r = setTimeout(() => { r = null, i || e.apply(a, s); }, t), l && e.apply(a, s); }; } function r(e) { return Object.getOwnPropertyNames(e).length <= 0; } function a(e, t) { const n = /^((after|before)print|(before)?unload|hashchange|message|o(ff|n)line|page(hide|show)|popstate|resize|storage)\b/; const o = { d: [], w: [] }; return (e || "").split(" ").forEach((e) => { const i = e + (t ? `.${t}` : ""); i.startsWith(".") ? (o.d.push(i), o.w.push(i)) : o[n.test(e) ? "w" : "d"].push(i); }), o.d = o.d.join(" "), o.w = o.w.join(" "), o; } function s(e, t) { if (typeof e !== "string") throw new Error("Event name must be a string"); const n = e.match(/([a-z]+\.([a-z]+))/i); const o = { target: t }; return n !== null && (e = n[1], o.namespace = n[2]), new window.CustomEvent(e, { detail: o }); } function l(e, t) { return !!(e && t && 2 & e.compareDocumentPosition(t)); } function d(e) { return typeof e === "string"; }Object.defineProperty(n, "__esModule", { value: !0 }), n.escapeHTML = o, n.debounce = i, n.isObjectEmpty = r, n.splitEvents = a, n.createEvent = s, n.isNodeAfter = l, n.isString = d; const u = (function (e) { return e && e.__esModule ? e : { default: e }; }(e(7))); u.default.Utils = u.default.Utils || {}, u.default.Utils.escapeHTML = o, u.default.Utils.debounce = i, u.default.Utils.isObjectEmpty = r, u.default.Utils.splitEvents = a, u.default.Utils.createEvent = s, u.default.Utils.isNodeAfter = l, u.default.Utils.isString = d;
  }, { 7: 7 }],
  28: [function (e, t, n) {
    function o(e) { if (typeof e !== "string") throw new Error("`url` argument must be a string"); const t = document.createElement("div"); return t.innerHTML = `<a href="${(0, u.escapeHTML)(e)}">x</a>`, t.firstChild.href; } function i(e) { const t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ""; return e && !t ? a(e) : t; } function r(e) { if (typeof e !== "string") throw new Error("`type` argument must be a string"); return e && e.indexOf(";") > -1 ? e.substr(0, e.indexOf(";")) : e; } function a(e) { if (typeof e !== "string") throw new Error("`url` argument must be a string"); for (let t = 0, n = c.length; t < n; t++) { const o = c[t](e); if (o) return o; } const i = l(s(e)); let r = "video/mp4"; return i && (~["mp4", "m4v", "ogg", "ogv", "webm", "flv", "mpeg", "mov"].indexOf(i) ? r = `video/${i}` : ~["mp3", "oga", "wav", "mid", "midi"].indexOf(i) && (r = `audio/${i}`)), r; } function s(e) { if (typeof e !== "string") throw new Error("`url` argument must be a string"); const t = e.split("?")[0].split("\\").pop().split("/").pop(); return ~t.indexOf(".") ? t.substring(t.lastIndexOf(".") + 1) : ""; } function l(e) { if (typeof e !== "string") throw new Error("`extension` argument must be a string"); switch (e) { case "mp4": case "m4v": return "mp4"; case "webm": case "webma": case "webmv": return "webm"; case "ogg": case "oga": case "ogv": return "ogg"; default: return e; } }Object.defineProperty(n, "__esModule", { value: !0 }), n.typeChecks = void 0, n.absolutizeUrl = o, n.formatType = i, n.getMimeFromType = r, n.getTypeFromFile = a, n.getExtension = s, n.normalizeExtension = l; const d = (function (e) { return e && e.__esModule ? e : { default: e }; }(e(7))); var u = e(27); var c = n.typeChecks = []; d.default.Utils = d.default.Utils || {}, d.default.Utils.typeChecks = c, d.default.Utils.absolutizeUrl = o, d.default.Utils.formatType = i, d.default.Utils.getMimeFromType = r, d.default.Utils.getTypeFromFile = a, d.default.Utils.getExtension = s, d.default.Utils.normalizeExtension = l;
  }, { 27: 27, 7: 7 }],
  29: [function (e, t, n) {
    function o(e) { return e && e.__esModule ? e : { default: e }; } const i = o(e(2)); const r = o(e(4)); if ([Element.prototype, CharacterData.prototype, DocumentType.prototype].forEach((e) => {
      e.hasOwnProperty("remove") || Object.defineProperty(e, "remove", {
        configurable: !0, enumerable: !0, writable: !0, value() { this.parentNode.removeChild(this); }
      });
    }), (function () { function e(e, t) { t = t || { bubbles: !1, cancelable: !1, detail: void 0 }; const n = i.default.createEvent("CustomEvent"); return n.initCustomEvent(e, t.bubbles, t.cancelable, t.detail), n; } if (typeof window.CustomEvent === "function") return !1; e.prototype = window.Event.prototype, window.CustomEvent = e; }()), typeof Object.assign !== "function" && (Object.assign = function (e) { if (e === null || void 0 === e) throw new TypeError("Cannot convert undefined or null to object"); for (var t = Object(e), n = 1, o = arguments.length; n < o; n++) { const i = arguments[n]; if (i !== null) for (const r in i)Object.prototype.hasOwnProperty.call(i, r) && (t[r] = i[r]); } return t; }), String.prototype.startsWith || (String.prototype.startsWith = function (e, t) { return t = t || 0, this.substr(t, e.length) === e; }), Element.prototype.matches || (Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (e) { for (var t = (this.document || this.ownerDocument).querySelectorAll(e), n = t.length - 1; --n >= 0 && t.item(n) !== this;);return n > -1; }), window.Element && !Element.prototype.closest && (Element.prototype.closest = function (e) { const t = (this.document || this.ownerDocument).querySelectorAll(e); let n = void 0; let o = this; do { for (n = t.length; --n >= 0 && t.item(n) !== o;); } while (n < 0 && (o = o.parentElement));return o; }), (function () { for (var e = 0, t = ["ms", "moz", "webkit", "o"], n = 0; n < t.length && !window.requestAnimationFrame; ++n)window.requestAnimationFrame = window[`${t[n]}RequestAnimationFrame`], window.cancelAnimationFrame = window[`${t[n]}CancelAnimationFrame`] || window[`${t[n]}CancelRequestAnimationFrame`]; window.requestAnimationFrame || (window.requestAnimationFrame = function (t) { const n = (new Date()).getTime(); const o = Math.max(0, 16 - (n - e)); const i = window.setTimeout(() => { t(n + o); }, o); return e = n + o, i; }), window.cancelAnimationFrame || (window.cancelAnimationFrame = function (e) { clearTimeout(e); }); }()), /firefox/i.test(navigator.userAgent)) { const a = window.getComputedStyle; window.getComputedStyle = function (e, t) { const n = a(e, t); return n === null ? { getPropertyValue() {} } : n; }; }window.Promise || (window.Promise = r.default), (function (e) { e && e.prototype && e.prototype.children === null && Object.defineProperty(e.prototype, "children", { get() { for (var e = 0, t = void 0, n = this.childNodes, o = []; t = n[e++];)t.nodeType === 1 && o.push(t); return o; } }); }(window.Node || window.Element));
  }, { 2: 2, 4: 4 }],
  30: [function (e, t, n) {
    function o() { return !((arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 25) % 1 == 0); } function i(e) { const t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; const n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]; const i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 25; const r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0; e = !e || typeof e !== "number" || e < 0 ? 0 : e; const a = Math.round(0.066666 * i); const s = Math.round(i); const l = 24 * Math.round(3600 * i); const d = Math.round(600 * i); const u = o(i) ? ";" : ":"; let c = void 0; let f = void 0; let p = void 0; let m = void 0; let h = Math.round(e * i); if (o(i)) { h < 0 && (h = l + h); const v = (h %= l) % d; h += 9 * a * Math.floor(h / d), v > a && (h += a * Math.floor((v - a) / Math.round(60 * s - a))); const y = Math.floor(h / s); c = Math.floor(Math.floor(y / 60) / 60), f = Math.floor(y / 60) % 60, p = n ? y % 60 : (h / s % 60).toFixed(r); } else c = Math.floor(e / 3600) % 24, f = Math.floor(e / 60) % 60, p = n ? Math.floor(e % 60) : (e % 60).toFixed(r); c = c <= 0 ? 0 : c, f = f <= 0 ? 0 : f, p = p <= 0 ? 0 : p; let g = t || c > 0 ? `${c < 10 ? `0${c}` : c}:` : ""; return g += `${f < 10 ? `0${f}` : f}:`, g += `${p < 10 ? `0${p}` : p}`, n && (g += (m = (m = (h % s).toFixed(0)) <= 0 ? 0 : m) < 10 ? `${u}0${m}` : `${u}${m}`), g; } function r(e) { const t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 25; if (typeof e !== "string") throw new TypeError("Time must be a string"); if (e.indexOf(";") > 0 && (e = e.replace(";", ":")), !/\d{2}(\:\d{2}){0,3}/i.test(e)) throw new TypeError("Time code must have the format `00:00:00`"); const n = e.split(":"); let i = void 0; let r = 0; let a = 0; let s = 0; let l = 0; let d = 0; const u = Math.round(0.066666 * t); const c = Math.round(t); const f = 3600 * c; const p = 60 * c; switch (n.length) { default: case 1: s = parseInt(n[0], 10); break; case 2: a = parseInt(n[0], 10), s = parseInt(n[1], 10); break; case 3: r = parseInt(n[0], 10), a = parseInt(n[1], 10), s = parseInt(n[2], 10); break; case 4: r = parseInt(n[0], 10), a = parseInt(n[1], 10), s = parseInt(n[2], 10), l = parseInt(n[3], 10); } return i = o(t) ? f * r + p * a + c * s + l - u * ((d = 60 * r + a) - Math.floor(d / 10)) : (f * r + p * a + t * s + l) / t, parseFloat(i.toFixed(3)); } function a(e, t) { const n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 25; e = !e || typeof e !== "number" || e < 0 ? 0 : e; for (var o = Math.floor(e / 3600) % 24, i = Math.floor(e / 60) % 60, r = Math.floor(e % 60), a = [[Math.floor((e % 1 * n).toFixed(3)), "f"], [r, "s"], [i, "m"], [o, "h"]], s = t.timeFormat, l = s[1] === s[0], d = l ? 2 : 1, u = s.length < d ? s[d] : ":", c = s[0], f = !1, p = 0, m = a.length; p < m; p++) if (~s.indexOf(a[p][1]))f = !0; else if (f) { for (var h = !1, v = p; v < m; v++) if (a[v][0] > 0) { h = !0; break; } if (!h) break; l || (s = c + s), s = a[p][1] + u + s, l && (s = a[p][1] + s), c = a[p][1]; }t.currentTimeFormat = s; } function s(e) { if (typeof e !== "string") throw new TypeError("Argument must be a string value"); for (var t = ~(e = e.replace(",", ".")).indexOf(".") ? e.split(".")[1].length : 0, n = 0, o = 1, i = 0, r = (e = e.split(":").reverse()).length; i < r; i++)o = 1, i > 0 && (o = Math.pow(60, i)), n += Number(e[i]) * o; return Number(n.toFixed(t)); }Object.defineProperty(n, "__esModule", { value: !0 }), n.isDropFrame = o, n.secondsToTimeCode = i, n.timeCodeToSeconds = r, n.calculateTimeFormat = a, n.convertSMPTEtoSeconds = s; const l = (function (e) { return e && e.__esModule ? e : { default: e }; }(e(7))); l.default.Utils = l.default.Utils || {}, l.default.Utils.secondsToTimeCode = i, l.default.Utils.timeCodeToSeconds = r, l.default.Utils.calculateTimeFormat = a, l.default.Utils.convertSMPTEtoSeconds = s;
  }, { 7: 7 }]
}, {}, [29, 6, 5, 15, 23, 20, 19, 21, 22, 24, 16, 18, 17, 9, 10, 11, 12, 13, 14]));
